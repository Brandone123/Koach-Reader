{"ast":null,"code":"const mockUsers = [{\n  id: 1,\n  username: 'demo',\n  email: 'demo@example.com',\n  isPremium: false,\n  koachPoints: 150,\n  readingStreak: 5,\n  preferences: {\n    readingFrequency: 'daily',\n    theme: 'light'\n  },\n  createdAt: new Date().toISOString()\n}];\nconst mockBooks = [{\n  id: 1,\n  title: 'The Power of Habit',\n  author: 'Charles Duhigg',\n  description: 'Why we do what we do in life and business. A great book about habits and how to change them.',\n  pageCount: 371,\n  category: 'Self-help',\n  language: 'English',\n  isPublic: true,\n  uploadedById: 1,\n  coverImageUrl: 'https://m.media-amazon.com/images/I/51X+CgRa5vL._SY344_BO1,204,203,200_.jpg',\n  createdAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),\n  updatedAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString()\n}, {\n  id: 2,\n  title: 'Atomic Habits',\n  author: 'James Clear',\n  description: 'An Easy & Proven Way to Build Good Habits & Break Bad Ones.',\n  pageCount: 320,\n  category: 'Self-help',\n  language: 'English',\n  isPublic: true,\n  uploadedById: 1,\n  coverImageUrl: 'https://m.media-amazon.com/images/I/51-nXsSRfZL._SY344_BO1,204,203,200_.jpg',\n  createdAt: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000).toISOString(),\n  updatedAt: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000).toISOString()\n}, {\n  id: 3,\n  title: 'Deep Work',\n  author: 'Cal Newport',\n  description: 'Rules for Focused Success in a Distracted World.',\n  pageCount: 296,\n  category: 'Productivity',\n  language: 'English',\n  isPublic: true,\n  uploadedById: 1,\n  coverImageUrl: 'https://m.media-amazon.com/images/I/51EQlZ0jFhL._SY344_BO1,204,203,200_.jpg',\n  createdAt: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000).toISOString(),\n  updatedAt: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000).toISOString()\n}];\nconst mockReadingPlans = [{\n  id: 1,\n  userId: 1,\n  bookId: 1,\n  title: 'Daily Habit Reading',\n  startDate: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000).toISOString(),\n  endDate: new Date(Date.now() + 21 * 24 * 60 * 60 * 1000).toISOString(),\n  totalPages: 371,\n  currentPage: 150,\n  frequency: 'daily',\n  pagesPerSession: 10,\n  notes: 'Read for 30 mins every morning',\n  createdAt: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000).toISOString(),\n  updatedAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),\n  book: {\n    title: 'The Power of Habit',\n    author: 'Charles Duhigg',\n    coverImageUrl: 'https://m.media-amazon.com/images/I/51X+CgRa5vL._SY344_BO1,204,203,200_.jpg'\n  }\n}, {\n  id: 2,\n  userId: 1,\n  bookId: 2,\n  title: 'Building Better Habits',\n  startDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),\n  endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n  totalPages: 320,\n  currentPage: 85,\n  frequency: 'daily',\n  pagesPerSession: 8,\n  notes: 'Read before bed to build habit',\n  createdAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),\n  updatedAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),\n  book: {\n    title: 'Atomic Habits',\n    author: 'James Clear',\n    coverImageUrl: 'https://m.media-amazon.com/images/I/51-nXsSRfZL._SY344_BO1,204,203,200_.jpg'\n  }\n}];\nconst mockReadingSessions = [{\n  id: 1,\n  userId: 1,\n  bookId: 1,\n  readingPlanId: 1,\n  pagesRead: 20,\n  minutesSpent: 35,\n  koachEarned: 20,\n  createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString()\n}, {\n  id: 2,\n  userId: 1,\n  bookId: 1,\n  readingPlanId: 1,\n  pagesRead: 15,\n  minutesSpent: 25,\n  koachEarned: 15,\n  createdAt: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000).toISOString()\n}, {\n  id: 3,\n  userId: 1,\n  bookId: 2,\n  readingPlanId: 2,\n  pagesRead: 25,\n  minutesSpent: 40,\n  koachEarned: 25,\n  createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString()\n}];\nconst mockBadges = [{\n  id: 1,\n  name: 'First Steps',\n  description: 'Completed your first reading session',\n  imageUrl: 'https://cdn-icons-png.flaticon.com/512/2583/2583344.png',\n  requirement: 'Complete 1 reading session',\n  points: 10\n}, {\n  id: 2,\n  name: 'Bookworm',\n  description: 'Read for 5 consecutive days',\n  imageUrl: 'https://cdn-icons-png.flaticon.com/512/3898/3898082.png',\n  requirement: 'Maintain a 5-day reading streak',\n  points: 50\n}, {\n  id: 3,\n  name: 'Page Turner',\n  description: 'Read 500 pages total',\n  imageUrl: 'https://cdn-icons-png.flaticon.com/512/3227/3227053.png',\n  requirement: 'Read a total of 500 pages',\n  points: 100\n}, {\n  id: 4,\n  name: 'Speed Reader',\n  description: 'Read over 100 pages in a single day',\n  imageUrl: 'https://cdn-icons-png.flaticon.com/512/2618/2618478.png',\n  requirement: 'Read 100+ pages in 24 hours',\n  points: 75\n}, {\n  id: 5,\n  name: 'Genre Explorer',\n  description: 'Read books from 3 different categories',\n  imageUrl: 'https://cdn-icons-png.flaticon.com/512/2232/2232688.png',\n  requirement: 'Read books across 3 distinct genres',\n  points: 50\n}, {\n  id: 6,\n  name: 'Book Completer',\n  description: 'Finished your first book completely',\n  imageUrl: 'https://cdn-icons-png.flaticon.com/512/3426/3426653.png',\n  requirement: 'Complete a full book',\n  points: 100\n}, {\n  id: 7,\n  name: 'Night Reader',\n  description: 'Read at night for 7 consecutive days',\n  imageUrl: 'https://cdn-icons-png.flaticon.com/512/2107/2107957.png',\n  requirement: 'Read between 8pm-6am for a week',\n  points: 80\n}];\nlet currentUser = null;\nexport async function mockFetchApi(endpoint, options = {}) {\n  const {\n    method = 'GET',\n    body\n  } = options;\n  await new Promise(resolve => setTimeout(resolve, 500));\n  const [path, queryString] = endpoint.split('?');\n  const params = queryString ? Object.fromEntries(new URLSearchParams(queryString)) : {};\n  const urlParts = path.split('/');\n  const idFromUrl = urlParts.length > 3 ? parseInt(urlParts[3]) : null;\n  switch (path) {\n    case '/api/login':\n      if (method === 'POST') {\n        const {\n          username,\n          password\n        } = body;\n        const user = mockUsers.find(u => u.username === username);\n        if (user) {\n          currentUser = user;\n          return user;\n        } else {\n          throw new Error('Invalid username or password');\n        }\n      }\n      break;\n    case '/api/register':\n      if (method === 'POST') {\n        const {\n          username,\n          email,\n          password\n        } = body;\n        if (mockUsers.some(u => u.username === username)) {\n          throw new Error('Username already exists');\n        }\n        const newUser = {\n          id: mockUsers.length + 1,\n          username,\n          email,\n          isPremium: false,\n          koachPoints: 0,\n          readingStreak: 0,\n          preferences: {\n            readingFrequency: 'daily',\n            theme: 'light'\n          },\n          createdAt: new Date().toISOString()\n        };\n        mockUsers.push(newUser);\n        currentUser = newUser;\n        return newUser;\n      }\n      break;\n    case '/api/logout':\n      currentUser = null;\n      return null;\n    case '/api/user':\n      if (currentUser) {\n        return currentUser;\n      } else {\n        throw new Error('Not logged in');\n      }\n    case '/api/books':\n      if (method === 'GET') {\n        return mockBooks;\n      } else if (method === 'POST' && currentUser) {\n        const newBook = {\n          id: mockBooks.length + 1,\n          title: body.title,\n          author: body.author,\n          description: body.description,\n          pageCount: body.pageCount,\n          category: body.category,\n          language: body.language || 'English',\n          isPublic: body.isPublic || false,\n          uploadedById: currentUser.id,\n          coverImageUrl: body.coverImageUrl,\n          fileUrl: body.fileUrl,\n          audioUrl: body.audioUrl,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString()\n        };\n        mockBooks.push(newBook);\n        return newBook;\n      }\n      break;\n    case `/api/books/${idFromUrl}`:\n      if (method === 'GET' && idFromUrl) {\n        const book = mockBooks.find(b => b.id === idFromUrl);\n        if (book) {\n          return book;\n        } else {\n          throw new Error('Book not found');\n        }\n      }\n      break;\n    case `/api/books/${idFromUrl}/file`:\n      if (method === 'GET' && idFromUrl) {\n        const book = mockBooks.find(b => b.id === idFromUrl);\n        if (book) {\n          return {\n            fileUrl: 'https://www.africau.edu/images/default/sample.pdf',\n            title: book.title,\n            author: book.author\n          };\n        } else {\n          throw new Error('Book file not found');\n        }\n      }\n      break;\n    case `/api/books/${idFromUrl}/audio`:\n      if (method === 'GET' && idFromUrl) {\n        const book = mockBooks.find(b => b.id === idFromUrl);\n        if (book) {\n          return {\n            fileUrl: 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3',\n            title: book.title,\n            author: book.author\n          };\n        } else {\n          throw new Error('Book audio not found');\n        }\n      }\n      break;\n    case '/api/reading-plans':\n      if (method === 'GET' && currentUser) {\n        return mockReadingPlans.filter(plan => plan.userId === currentUser.id);\n      } else if (method === 'POST' && currentUser) {\n        const newPlan = {\n          id: mockReadingPlans.length + 1,\n          userId: currentUser.id,\n          bookId: body.bookId,\n          title: body.title,\n          startDate: body.startDate,\n          endDate: body.endDate,\n          totalPages: body.totalPages,\n          currentPage: 0,\n          frequency: body.frequency || 'daily',\n          pagesPerSession: body.pagesPerSession,\n          notes: body.notes,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n          book: mockBooks.find(b => b.id === body.bookId) ? {\n            title: mockBooks.find(b => b.id === body.bookId).title,\n            author: mockBooks.find(b => b.id === body.bookId).author,\n            coverImageUrl: mockBooks.find(b => b.id === body.bookId).coverImageUrl\n          } : undefined\n        };\n        mockReadingPlans.push(newPlan);\n        return newPlan;\n      }\n      break;\n    case `/api/reading-plans/${idFromUrl}`:\n      if (method === 'GET' && idFromUrl && currentUser) {\n        const plan = mockReadingPlans.find(p => p.id === idFromUrl && p.userId === currentUser.id);\n        if (plan) {\n          return plan;\n        } else {\n          throw new Error('Reading plan not found');\n        }\n      }\n      break;\n    case '/api/reading-sessions':\n      if (method === 'GET' && currentUser) {\n        return mockReadingSessions.filter(s => s.userId === currentUser.id);\n      } else if (method === 'POST' && currentUser) {\n        const koachEarned = Math.round(body.pagesRead * 1.5);\n        const newSession = {\n          id: mockReadingSessions.length + 1,\n          userId: currentUser.id,\n          bookId: body.bookId,\n          readingPlanId: body.readingPlanId || null,\n          pagesRead: body.pagesRead,\n          minutesSpent: body.minutesSpent || 0,\n          koachEarned: koachEarned,\n          notes: body.notes,\n          createdAt: new Date().toISOString()\n        };\n        mockReadingSessions.push(newSession);\n        if (body.readingPlanId) {\n          const planIndex = mockReadingPlans.findIndex(p => p.id === body.readingPlanId);\n          if (planIndex !== -1) {\n            mockReadingPlans[planIndex].currentPage += body.pagesRead;\n            mockReadingPlans[planIndex].updatedAt = new Date().toISOString();\n          }\n        }\n        if (currentUser) {\n          currentUser.koachPoints += koachEarned;\n        }\n        return {\n          session: newSession,\n          koachEarned: koachEarned\n        };\n      }\n      break;\n    case '/api/badges':\n      if (method === 'GET') {\n        return mockBadges;\n      }\n      break;\n    case '/api/user/badges':\n      if (method === 'GET' && currentUser) {\n        return [{\n          id: 1,\n          userId: currentUser.id,\n          badgeId: 1,\n          dateEarned: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000).toISOString(),\n          badge: mockBadges[0]\n        }, {\n          id: 2,\n          userId: currentUser.id,\n          badgeId: 2,\n          dateEarned: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),\n          badge: mockBadges[1]\n        }, {\n          id: 3,\n          userId: currentUser.id,\n          badgeId: 3,\n          dateEarned: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\n          badge: mockBadges[2]\n        }];\n      }\n      break;\n    case '/api/leaderboard':\n      return [{\n        userId: 1,\n        username: 'demo',\n        points: 150,\n        rank: 1\n      }, {\n        userId: 2,\n        username: 'bookworm42',\n        points: 120,\n        rank: 2\n      }, {\n        userId: 3,\n        username: 'readaholic',\n        points: 100,\n        rank: 3\n      }, {\n        userId: 4,\n        username: 'bibliophile',\n        points: 95,\n        rank: 4\n      }, {\n        userId: 5,\n        username: 'kindlemaster',\n        points: 80,\n        rank: 5\n      }, {\n        userId: 6,\n        username: 'speedreader',\n        points: 75,\n        rank: 6\n      }, {\n        userId: 7,\n        username: 'literaryexplorer',\n        points: 65,\n        rank: 7\n      }, {\n        userId: 8,\n        username: 'bookdragon',\n        points: 55,\n        rank: 8\n      }, {\n        userId: 9,\n        username: 'pageturner',\n        points: 40,\n        rank: 9\n      }, {\n        userId: 10,\n        username: 'wordsword',\n        points: 30,\n        rank: 10\n      }];\n    case '/api/goals':\n      if (currentUser) {\n        return [{\n          id: 'streak7',\n          name: '7-Day Streak',\n          description: 'Read every day for a week',\n          currentValue: currentUser.readingStreak,\n          targetValue: 7,\n          progress: Math.min(100, currentUser.readingStreak / 7 * 100),\n          completed: currentUser.readingStreak >= 7,\n          reward: {\n            type: 'badge',\n            value: 1,\n            badgeId: 2\n          }\n        }, {\n          id: 'pages500',\n          name: '500 Pages',\n          description: 'Read a total of 500 pages',\n          currentValue: 250,\n          targetValue: 500,\n          progress: 50,\n          completed: false,\n          reward: {\n            type: 'badge',\n            value: 1,\n            badgeId: 3\n          }\n        }, {\n          id: 'sessions10',\n          name: '10 Reading Sessions',\n          description: 'Complete 10 reading sessions',\n          currentValue: mockReadingSessions.filter(s => s.userId === currentUser.id).length,\n          targetValue: 10,\n          progress: Math.min(100, mockReadingSessions.filter(s => s.userId === currentUser.id).length / 10 * 100),\n          completed: mockReadingSessions.filter(s => s.userId === currentUser.id).length >= 10,\n          reward: {\n            type: 'points',\n            value: 50\n          }\n        }, {\n          id: 'books3',\n          name: '3 Books',\n          description: 'Finish 3 different books',\n          currentValue: 1,\n          targetValue: 3,\n          progress: 33.33,\n          completed: false,\n          reward: {\n            type: 'badge',\n            value: 1,\n            badgeId: 6\n          }\n        }];\n      }\n      return [];\n    case '/api/stats':\n      if (currentUser) {\n        return {\n          daysActive: 12,\n          totalReadingTime: 465,\n          totalPagesRead: 250,\n          booksStarted: 3,\n          booksCompleted: 1,\n          averagePagesPerDay: 20.8,\n          averageTimePerDay: 38.75,\n          currentStreak: currentUser.readingStreak,\n          longestStreak: Math.max(currentUser.readingStreak, 7),\n          preferredReadingTime: '8:00 PM',\n          mostReadCategory: 'Self-help',\n          readingByDay: [{\n            day: 'Monday',\n            pagesRead: 35\n          }, {\n            day: 'Tuesday',\n            pagesRead: 28\n          }, {\n            day: 'Wednesday',\n            pagesRead: 42\n          }, {\n            day: 'Thursday',\n            pagesRead: 15\n          }, {\n            day: 'Friday',\n            pagesRead: 30\n          }, {\n            day: 'Saturday',\n            pagesRead: 55\n          }, {\n            day: 'Sunday',\n            pagesRead: 45\n          }],\n          readingByTime: [{\n            time: 'Morning',\n            percentage: 15\n          }, {\n            time: 'Afternoon',\n            percentage: 25\n          }, {\n            time: 'Evening',\n            percentage: 45\n          }, {\n            time: 'Night',\n            percentage: 15\n          }]\n        };\n      }\n      return {};\n    case '/api/challenges':\n      if (method === 'GET') {\n        return [{\n          id: 1,\n          title: \"30-Day Reading Challenge\",\n          description: \"Read every day for 30 days and track your progress!\",\n          creatorId: 2,\n          startDate: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000).toISOString(),\n          endDate: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000).toISOString(),\n          goal: 500,\n          goalType: \"pages\",\n          isPrivate: false,\n          participantCount: 8,\n          myProgress: currentUser ? 220 : undefined,\n          status: currentUser ? \"active\" : undefined,\n          createdAt: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000).toISOString(),\n          updatedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString()\n        }, {\n          id: 2,\n          title: \"Summer Book Club\",\n          description: \"Read 3 books from our summer reading list\",\n          creatorId: 3,\n          startDate: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),\n          endDate: new Date(Date.now() + 60 * 24 * 60 * 60 * 1000).toISOString(),\n          goal: 3,\n          goalType: \"books\",\n          isPrivate: false,\n          participantCount: 12,\n          createdAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),\n          updatedAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString()\n        }, {\n          id: 3,\n          title: \"Speed Reading Practice\",\n          description: \"Track your reading speed and improve over time\",\n          creatorId: 5,\n          startDate: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),\n          endDate: new Date(Date.now() + 25 * 24 * 60 * 60 * 1000).toISOString(),\n          goal: 1000,\n          goalType: \"minutes\",\n          isPrivate: false,\n          participantCount: 5,\n          createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),\n          updatedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString()\n        }];\n      } else if (method === 'POST' && currentUser) {\n        return {\n          id: 4,\n          title: body.title,\n          description: body.description,\n          creatorId: currentUser.id,\n          startDate: body.startDate,\n          endDate: body.endDate,\n          goal: body.goal,\n          goalType: body.goalType,\n          isPrivate: !!body.isPrivate,\n          participantCount: 1,\n          myProgress: 0,\n          status: \"active\",\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString()\n        };\n      }\n      break;\n    case `/api/challenges/${idFromUrl}`:\n      if (method === 'GET' && idFromUrl) {\n        return {\n          id: idFromUrl,\n          title: \"30-Day Reading Challenge\",\n          description: \"Read every day for 30 days and track your progress!\",\n          creatorId: 2,\n          creatorName: \"bookworm42\",\n          startDate: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000).toISOString(),\n          endDate: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000).toISOString(),\n          goal: 500,\n          goalType: \"pages\",\n          isPrivate: false,\n          participantCount: 8,\n          myProgress: currentUser ? 220 : undefined,\n          status: currentUser ? \"active\" : undefined,\n          createdAt: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000).toISOString(),\n          updatedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString()\n        };\n      }\n      break;\n    case `/api/challenges/${idFromUrl}/participants`:\n      if (method === 'GET' && idFromUrl) {\n        return [{\n          id: 1,\n          userId: currentUser ? currentUser.id : 1,\n          username: currentUser ? currentUser.username : \"demo\",\n          challengeId: idFromUrl,\n          progress: 220,\n          progressPercentage: 44,\n          status: \"active\",\n          joinedAt: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000).toISOString()\n        }, {\n          id: 2,\n          userId: 2,\n          username: \"bookworm42\",\n          challengeId: idFromUrl,\n          progress: 350,\n          progressPercentage: 70,\n          status: \"active\",\n          joinedAt: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000).toISOString()\n        }, {\n          id: 3,\n          userId: 3,\n          username: \"readaholic\",\n          challengeId: idFromUrl,\n          progress: 500,\n          progressPercentage: 100,\n          status: \"completed\",\n          joinedAt: new Date(Date.now() - 12 * 24 * 60 * 60 * 1000).toISOString()\n        }, {\n          id: 4,\n          userId: 4,\n          username: \"bibliophile\",\n          challengeId: idFromUrl,\n          progress: 320,\n          progressPercentage: 64,\n          status: \"active\",\n          joinedAt: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000).toISOString()\n        }, {\n          id: 5,\n          userId: 5,\n          username: \"kindlemaster\",\n          challengeId: idFromUrl,\n          progress: 180,\n          progressPercentage: 36,\n          status: \"active\",\n          joinedAt: new Date(Date.now() - 11 * 24 * 60 * 60 * 1000).toISOString()\n        }];\n      }\n      break;\n    case `/api/challenges/${idFromUrl}/progress`:\n      if (method === 'POST' && idFromUrl && currentUser) {\n        return {\n          success: true,\n          message: \"Progress updated successfully\"\n        };\n      }\n      break;\n    case `/api/challenges/${idFromUrl}/join`:\n      if (method === 'POST' && idFromUrl && currentUser) {\n        return {\n          success: true,\n          message: \"Joined challenge successfully\"\n        };\n      }\n      break;\n    case `/api/challenges/${idFromUrl}/comments`:\n      if (method === 'GET' && idFromUrl) {\n        return [{\n          id: 1,\n          userId: 2,\n          username: \"bookworm42\",\n          challengeId: idFromUrl,\n          content: \"Let's all try to read daily and support each other!\",\n          createdAt: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000).toISOString()\n        }, {\n          id: 2,\n          userId: 3,\n          username: \"readaholic\",\n          challengeId: idFromUrl,\n          content: \"Just finished! It was a great challenge, thanks for organizing!\",\n          createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString()\n        }, {\n          id: 3,\n          userId: 5,\n          username: \"kindlemaster\",\n          challengeId: idFromUrl,\n          content: \"I'm finding it harder than expected, but I'm not giving up!\",\n          createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString()\n        }];\n      } else if (method === 'POST' && idFromUrl && currentUser) {\n        return {\n          id: 4,\n          userId: currentUser.id,\n          username: currentUser.username,\n          challengeId: idFromUrl,\n          content: body.content,\n          createdAt: new Date().toISOString()\n        };\n      }\n      break;\n    default:\n      console.log(`Mock API endpoint not implemented: ${path}`);\n      return [];\n  }\n}","map":{"version":3,"names":["mockUsers","id","username","email","isPremium","koachPoints","readingStreak","preferences","readingFrequency","theme","createdAt","Date","toISOString","mockBooks","title","author","description","pageCount","category","language","isPublic","uploadedById","coverImageUrl","now","updatedAt","mockReadingPlans","userId","bookId","startDate","endDate","totalPages","currentPage","frequency","pagesPerSession","notes","book","mockReadingSessions","readingPlanId","pagesRead","minutesSpent","koachEarned","mockBadges","name","imageUrl","requirement","points","currentUser","mockFetchApi","endpoint","options","method","body","Promise","resolve","setTimeout","path","queryString","split","params","Object","fromEntries","URLSearchParams","urlParts","idFromUrl","length","parseInt","password","user","find","u","Error","some","newUser","push","newBook","fileUrl","audioUrl","b","filter","plan","newPlan","undefined","p","s","Math","round","newSession","planIndex","findIndex","session","badgeId","dateEarned","badge","rank","currentValue","targetValue","progress","min","completed","reward","type","value","daysActive","totalReadingTime","totalPagesRead","booksStarted","booksCompleted","averagePagesPerDay","averageTimePerDay","currentStreak","longestStreak","max","preferredReadingTime","mostReadCategory","readingByDay","day","readingByTime","time","percentage","creatorId","goal","goalType","isPrivate","participantCount","myProgress","status","creatorName","challengeId","progressPercentage","joinedAt","success","message","content","console","log"],"sources":["D:/All_Projects/KoachReadsFinal/client/src/utils/mockApi.ts"],"sourcesContent":["// This is a temporary mock API service to ensure the app works with Expo Go 52+\n// without requiring a functional backend server\n\nimport { AuthUser } from '../hooks/useAuth';\n\n// Mock data types\ninterface Book {\n  id: number;\n  title: string;\n  author: string;\n  description: string;\n  pageCount: number;\n  category: string;\n  language: string;\n  isPublic: boolean;\n  uploadedById: number;\n  fileUrl?: string;\n  audioUrl?: string;\n  coverImageUrl?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface ReadingPlan {\n  id: number;\n  userId: number;\n  bookId: number;\n  title: string;\n  startDate: string;\n  endDate: string;\n  totalPages: number;\n  currentPage: number;\n  frequency: 'daily' | 'weekly';\n  pagesPerSession: number;\n  notes?: string;\n  createdAt: string;\n  updatedAt: string;\n  book?: {\n    title: string;\n    author: string;\n    coverImageUrl?: string;\n  };\n}\n\ninterface ReadingSession {\n  id: number;\n  userId: number;\n  bookId: number;\n  readingPlanId: number | null;\n  pagesRead: number;\n  minutesSpent: number;\n  koachEarned: number;\n  notes?: string;\n  createdAt: string;\n}\n\ninterface Badge {\n  id: number;\n  name: string;\n  description: string;\n  imageUrl: string;\n  requirement: string;\n  points: number;\n}\n\n// Store our mock data\nconst mockUsers: AuthUser[] = [\n  {\n    id: 1,\n    username: 'demo',\n    email: 'demo@example.com',\n    isPremium: false,\n    koachPoints: 150,\n    readingStreak: 5,\n    preferences: {\n      readingFrequency: 'daily',\n      theme: 'light',\n    },\n    createdAt: new Date().toISOString(),\n  },\n];\n\nconst mockBooks: Book[] = [\n  {\n    id: 1,\n    title: 'The Power of Habit',\n    author: 'Charles Duhigg',\n    description: 'Why we do what we do in life and business. A great book about habits and how to change them.',\n    pageCount: 371,\n    category: 'Self-help',\n    language: 'English',\n    isPublic: true,\n    uploadedById: 1,\n    coverImageUrl: 'https://m.media-amazon.com/images/I/51X+CgRa5vL._SY344_BO1,204,203,200_.jpg',\n    createdAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),\n    updatedAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),\n  },\n  {\n    id: 2,\n    title: 'Atomic Habits',\n    author: 'James Clear',\n    description: 'An Easy & Proven Way to Build Good Habits & Break Bad Ones.',\n    pageCount: 320,\n    category: 'Self-help',\n    language: 'English',\n    isPublic: true,\n    uploadedById: 1,\n    coverImageUrl: 'https://m.media-amazon.com/images/I/51-nXsSRfZL._SY344_BO1,204,203,200_.jpg',\n    createdAt: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000).toISOString(),\n    updatedAt: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000).toISOString(),\n  },\n  {\n    id: 3,\n    title: 'Deep Work',\n    author: 'Cal Newport',\n    description: 'Rules for Focused Success in a Distracted World.',\n    pageCount: 296,\n    category: 'Productivity',\n    language: 'English',\n    isPublic: true,\n    uploadedById: 1,\n    coverImageUrl: 'https://m.media-amazon.com/images/I/51EQlZ0jFhL._SY344_BO1,204,203,200_.jpg',\n    createdAt: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000).toISOString(),\n    updatedAt: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000).toISOString(),\n  },\n];\n\nconst mockReadingPlans: ReadingPlan[] = [\n  {\n    id: 1,\n    userId: 1,\n    bookId: 1,\n    title: 'Daily Habit Reading',\n    startDate: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000).toISOString(),\n    endDate: new Date(Date.now() + 21 * 24 * 60 * 60 * 1000).toISOString(),\n    totalPages: 371,\n    currentPage: 150,\n    frequency: 'daily',\n    pagesPerSession: 10,\n    notes: 'Read for 30 mins every morning',\n    createdAt: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000).toISOString(),\n    updatedAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),\n    book: {\n      title: 'The Power of Habit',\n      author: 'Charles Duhigg',\n      coverImageUrl: 'https://m.media-amazon.com/images/I/51X+CgRa5vL._SY344_BO1,204,203,200_.jpg',\n    }\n  },\n  {\n    id: 2,\n    userId: 1,\n    bookId: 2,\n    title: 'Building Better Habits',\n    startDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),\n    endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n    totalPages: 320,\n    currentPage: 85,\n    frequency: 'daily',\n    pagesPerSession: 8,\n    notes: 'Read before bed to build habit',\n    createdAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),\n    updatedAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),\n    book: {\n      title: 'Atomic Habits',\n      author: 'James Clear',\n      coverImageUrl: 'https://m.media-amazon.com/images/I/51-nXsSRfZL._SY344_BO1,204,203,200_.jpg',\n    }\n  },\n];\n\nconst mockReadingSessions: ReadingSession[] = [\n  {\n    id: 1,\n    userId: 1,\n    bookId: 1,\n    readingPlanId: 1,\n    pagesRead: 20,\n    minutesSpent: 35,\n    koachEarned: 20,\n    createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),\n  },\n  {\n    id: 2,\n    userId: 1,\n    bookId: 1,\n    readingPlanId: 1,\n    pagesRead: 15,\n    minutesSpent: 25,\n    koachEarned: 15,\n    createdAt: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000).toISOString(),\n  },\n  {\n    id: 3,\n    userId: 1,\n    bookId: 2,\n    readingPlanId: 2,\n    pagesRead: 25,\n    minutesSpent: 40,\n    koachEarned: 25,\n    createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),\n  },\n];\n\nconst mockBadges: Badge[] = [\n  {\n    id: 1,\n    name: 'First Steps',\n    description: 'Completed your first reading session',\n    imageUrl: 'https://cdn-icons-png.flaticon.com/512/2583/2583344.png',\n    requirement: 'Complete 1 reading session',\n    points: 10,\n  },\n  {\n    id: 2,\n    name: 'Bookworm',\n    description: 'Read for 5 consecutive days',\n    imageUrl: 'https://cdn-icons-png.flaticon.com/512/3898/3898082.png',\n    requirement: 'Maintain a 5-day reading streak',\n    points: 50,\n  },\n  {\n    id: 3,\n    name: 'Page Turner',\n    description: 'Read 500 pages total',\n    imageUrl: 'https://cdn-icons-png.flaticon.com/512/3227/3227053.png',\n    requirement: 'Read a total of 500 pages',\n    points: 100,\n  },\n  {\n    id: 4,\n    name: 'Speed Reader',\n    description: 'Read over 100 pages in a single day',\n    imageUrl: 'https://cdn-icons-png.flaticon.com/512/2618/2618478.png',\n    requirement: 'Read 100+ pages in 24 hours',\n    points: 75,\n  },\n  {\n    id: 5,\n    name: 'Genre Explorer',\n    description: 'Read books from 3 different categories',\n    imageUrl: 'https://cdn-icons-png.flaticon.com/512/2232/2232688.png',\n    requirement: 'Read books across 3 distinct genres',\n    points: 50,\n  },\n  {\n    id: 6,\n    name: 'Book Completer',\n    description: 'Finished your first book completely',\n    imageUrl: 'https://cdn-icons-png.flaticon.com/512/3426/3426653.png',\n    requirement: 'Complete a full book',\n    points: 100,\n  },\n  {\n    id: 7,\n    name: 'Night Reader',\n    description: 'Read at night for 7 consecutive days',\n    imageUrl: 'https://cdn-icons-png.flaticon.com/512/2107/2107957.png',\n    requirement: 'Read between 8pm-6am for a week',\n    points: 80,\n  },\n];\n\n// Store our current user session\nlet currentUser: AuthUser | null = null;\n\nexport async function mockFetchApi(\n  endpoint: string,\n  options: {\n    method?: 'GET' | 'POST' | 'PUT' | 'DELETE';\n    body?: any;\n  } = {}\n): Promise<any> {\n  const { method = 'GET', body } = options;\n  \n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 500));\n\n  // Check if endpoint contains request parameters\n  const [path, queryString] = endpoint.split('?');\n  const params = queryString ? Object.fromEntries(new URLSearchParams(queryString)) : {};\n\n  // Extract ID from URL if present (e.g., /api/books/1)\n  const urlParts = path.split('/');\n  const idFromUrl = urlParts.length > 3 ? parseInt(urlParts[3]) : null;\n\n  // Handle API endpoints\n  switch (path) {\n    case '/api/login':\n      if (method === 'POST') {\n        const { username, password } = body;\n        // In a real app, we would verify the password\n        const user = mockUsers.find(u => u.username === username);\n        \n        if (user) {\n          currentUser = user;\n          return user;\n        } else {\n          throw new Error('Invalid username or password');\n        }\n      }\n      break;\n      \n    case '/api/register':\n      if (method === 'POST') {\n        const { username, email, password } = body;\n        // Check if user already exists\n        if (mockUsers.some(u => u.username === username)) {\n          throw new Error('Username already exists');\n        }\n        \n        // Create new user\n        const newUser: AuthUser = {\n          id: mockUsers.length + 1,\n          username,\n          email,\n          isPremium: false,\n          koachPoints: 0,\n          readingStreak: 0,\n          preferences: {\n            readingFrequency: 'daily',\n            theme: 'light'\n          },\n          createdAt: new Date().toISOString(),\n        };\n        \n        mockUsers.push(newUser);\n        currentUser = newUser;\n        return newUser;\n      }\n      break;\n      \n    case '/api/logout':\n      currentUser = null;\n      return null;\n      \n    case '/api/user':\n      if (currentUser) {\n        return currentUser;\n      } else {\n        throw new Error('Not logged in');\n      }\n\n    // === Books API ===\n    case '/api/books':\n      if (method === 'GET') {\n        return mockBooks;\n      } else if (method === 'POST' && currentUser) {\n        const newBook: Book = {\n          id: mockBooks.length + 1,\n          title: body.title,\n          author: body.author,\n          description: body.description,\n          pageCount: body.pageCount,\n          category: body.category,\n          language: body.language || 'English',\n          isPublic: body.isPublic || false,\n          uploadedById: currentUser.id,\n          coverImageUrl: body.coverImageUrl,\n          fileUrl: body.fileUrl,\n          audioUrl: body.audioUrl,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n        };\n        mockBooks.push(newBook);\n        return newBook;\n      }\n      break;\n    \n    // Get books by ID\n    case `/api/books/${idFromUrl}`:\n      if (method === 'GET' && idFromUrl) {\n        const book = mockBooks.find(b => b.id === idFromUrl);\n        if (book) {\n          return book;\n        } else {\n          throw new Error('Book not found');\n        }\n      }\n      break;\n      \n    // Get book PDF file\n    case `/api/books/${idFromUrl}/file`:\n      if (method === 'GET' && idFromUrl) {\n        const book = mockBooks.find(b => b.id === idFromUrl);\n        if (book) {\n          return {\n            fileUrl: 'https://www.africau.edu/images/default/sample.pdf',\n            title: book.title,\n            author: book.author\n          };\n        } else {\n          throw new Error('Book file not found');\n        }\n      }\n      break;\n      \n    // Get book audio file\n    case `/api/books/${idFromUrl}/audio`:\n      if (method === 'GET' && idFromUrl) {\n        const book = mockBooks.find(b => b.id === idFromUrl);\n        if (book) {\n          return {\n            fileUrl: 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3',\n            title: book.title,\n            author: book.author\n          };\n        } else {\n          throw new Error('Book audio not found');\n        }\n      }\n      break;\n\n    // === Reading Plans API ===\n    case '/api/reading-plans':\n      if (method === 'GET' && currentUser) {\n        return mockReadingPlans.filter(plan => plan.userId === currentUser.id);\n      } else if (method === 'POST' && currentUser) {\n        const newPlan: ReadingPlan = {\n          id: mockReadingPlans.length + 1,\n          userId: currentUser.id,\n          bookId: body.bookId,\n          title: body.title,\n          startDate: body.startDate,\n          endDate: body.endDate,\n          totalPages: body.totalPages,\n          currentPage: 0,\n          frequency: body.frequency || 'daily',\n          pagesPerSession: body.pagesPerSession,\n          notes: body.notes,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n          book: mockBooks.find(b => b.id === body.bookId) ? {\n            title: mockBooks.find(b => b.id === body.bookId)!.title,\n            author: mockBooks.find(b => b.id === body.bookId)!.author,\n            coverImageUrl: mockBooks.find(b => b.id === body.bookId)!.coverImageUrl,\n          } : undefined\n        };\n        mockReadingPlans.push(newPlan);\n        return newPlan;\n      }\n      break;\n\n    // Get reading plan by ID\n    case `/api/reading-plans/${idFromUrl}`:\n      if (method === 'GET' && idFromUrl && currentUser) {\n        const plan = mockReadingPlans.find(p => p.id === idFromUrl && p.userId === currentUser.id);\n        if (plan) {\n          return plan;\n        } else {\n          throw new Error('Reading plan not found');\n        }\n      }\n      break;\n\n    // === Reading Sessions API ===\n    case '/api/reading-sessions':\n      if (method === 'GET' && currentUser) {\n        return mockReadingSessions.filter(s => s.userId === currentUser!.id);\n      } else if (method === 'POST' && currentUser) {\n        const koachEarned = Math.round(body.pagesRead * 1.5);\n        \n        // Create new reading session\n        const newSession: ReadingSession = {\n          id: mockReadingSessions.length + 1,\n          userId: currentUser.id,\n          bookId: body.bookId,\n          readingPlanId: body.readingPlanId || null,\n          pagesRead: body.pagesRead,\n          minutesSpent: body.minutesSpent || 0,\n          koachEarned: koachEarned,\n          notes: body.notes,\n          createdAt: new Date().toISOString(),\n        };\n        \n        mockReadingSessions.push(newSession);\n        \n        // Update reading plan progress if applicable\n        if (body.readingPlanId) {\n          const planIndex = mockReadingPlans.findIndex(p => p.id === body.readingPlanId);\n          if (planIndex !== -1) {\n            mockReadingPlans[planIndex].currentPage += body.pagesRead;\n            mockReadingPlans[planIndex].updatedAt = new Date().toISOString();\n          }\n        }\n        \n        // Update user's koach points\n        if (currentUser) {\n          currentUser.koachPoints += koachEarned;\n        }\n        \n        return {\n          session: newSession,\n          koachEarned: koachEarned\n        };\n      }\n      break;\n\n    // === Badges API ===\n    case '/api/badges':\n      if (method === 'GET') {\n        return mockBadges;\n      }\n      break;\n\n    case '/api/user/badges':\n      if (method === 'GET' && currentUser) {\n        // In a real app, we would return the badges the user has earned\n        // For mock purposes, return the first 3 badges as if the user earned them\n        return [\n          {\n            id: 1,\n            userId: currentUser.id,\n            badgeId: 1,\n            dateEarned: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000).toISOString(),\n            badge: mockBadges[0]\n          },\n          {\n            id: 2,\n            userId: currentUser.id,\n            badgeId: 2,\n            dateEarned: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),\n            badge: mockBadges[1]\n          },\n          {\n            id: 3,\n            userId: currentUser.id,\n            badgeId: 3,\n            dateEarned: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\n            badge: mockBadges[2]\n          }\n        ];\n      }\n      break;\n      \n    // Leaderboard\n    case '/api/leaderboard':\n      return [\n        { userId: 1, username: 'demo', points: 150, rank: 1 },\n        { userId: 2, username: 'bookworm42', points: 120, rank: 2 },\n        { userId: 3, username: 'readaholic', points: 100, rank: 3 },\n        { userId: 4, username: 'bibliophile', points: 95, rank: 4 },\n        { userId: 5, username: 'kindlemaster', points: 80, rank: 5 },\n        { userId: 6, username: 'speedreader', points: 75, rank: 6 },\n        { userId: 7, username: 'literaryexplorer', points: 65, rank: 7 },\n        { userId: 8, username: 'bookdragon', points: 55, rank: 8 },\n        { userId: 9, username: 'pageturner', points: 40, rank: 9 },\n        { userId: 10, username: 'wordsword', points: 30, rank: 10 },\n      ];\n      \n    // Achievement Goals\n    case '/api/goals':\n      if (currentUser) {\n        return [\n          {\n            id: 'streak7',\n            name: '7-Day Streak',\n            description: 'Read every day for a week',\n            currentValue: currentUser.readingStreak,\n            targetValue: 7,\n            progress: Math.min(100, (currentUser.readingStreak / 7) * 100),\n            completed: currentUser.readingStreak >= 7,\n            reward: {\n              type: 'badge',\n              value: 1,\n              badgeId: 2\n            }\n          },\n          {\n            id: 'pages500',\n            name: '500 Pages',\n            description: 'Read a total of 500 pages',\n            currentValue: 250, // Mock value\n            targetValue: 500,\n            progress: 50, // 50%\n            completed: false,\n            reward: {\n              type: 'badge',\n              value: 1,\n              badgeId: 3\n            }\n          },\n          {\n            id: 'sessions10',\n            name: '10 Reading Sessions',\n            description: 'Complete 10 reading sessions',\n            currentValue: mockReadingSessions.filter(s => s.userId === currentUser.id).length,\n            targetValue: 10,\n            progress: Math.min(100, (mockReadingSessions.filter(s => s.userId === currentUser.id).length / 10) * 100),\n            completed: mockReadingSessions.filter(s => s.userId === currentUser.id).length >= 10,\n            reward: {\n              type: 'points',\n              value: 50\n            }\n          },\n          {\n            id: 'books3',\n            name: '3 Books',\n            description: 'Finish 3 different books',\n            currentValue: 1,\n            targetValue: 3,\n            progress: 33.33,\n            completed: false,\n            reward: {\n              type: 'badge',\n              value: 1,\n              badgeId: 6\n            }\n          },\n        ];\n      }\n      return [];\n      \n    // Reading Stats\n    case '/api/stats':\n      if (currentUser) {\n        return {\n          daysActive: 12,\n          totalReadingTime: 465, // minutes\n          totalPagesRead: 250,\n          booksStarted: 3,\n          booksCompleted: 1,\n          averagePagesPerDay: 20.8,\n          averageTimePerDay: 38.75, // minutes\n          currentStreak: currentUser.readingStreak,\n          longestStreak: Math.max(currentUser.readingStreak, 7),\n          preferredReadingTime: '8:00 PM',\n          mostReadCategory: 'Self-help',\n          readingByDay: [\n            { day: 'Monday', pagesRead: 35 },\n            { day: 'Tuesday', pagesRead: 28 },\n            { day: 'Wednesday', pagesRead: 42 },\n            { day: 'Thursday', pagesRead: 15 },\n            { day: 'Friday', pagesRead: 30 },\n            { day: 'Saturday', pagesRead: 55 },\n            { day: 'Sunday', pagesRead: 45 }\n          ],\n          readingByTime: [\n            { time: 'Morning', percentage: 15 },\n            { time: 'Afternoon', percentage: 25 },\n            { time: 'Evening', percentage: 45 },\n            { time: 'Night', percentage: 15 }\n          ]\n        };\n      }\n      return {};\n      \n    // === Challenges API ===\n    case '/api/challenges':\n      if (method === 'GET') {\n        return [\n          {\n            id: 1,\n            title: \"30-Day Reading Challenge\",\n            description: \"Read every day for 30 days and track your progress!\",\n            creatorId: 2,\n            startDate: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000).toISOString(),\n            endDate: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000).toISOString(),\n            goal: 500,\n            goalType: \"pages\",\n            isPrivate: false,\n            participantCount: 8,\n            myProgress: currentUser ? 220 : undefined,\n            status: currentUser ? \"active\" : undefined,\n            createdAt: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000).toISOString(),\n            updatedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString()\n          },\n          {\n            id: 2,\n            title: \"Summer Book Club\",\n            description: \"Read 3 books from our summer reading list\",\n            creatorId: 3,\n            startDate: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),\n            endDate: new Date(Date.now() + 60 * 24 * 60 * 60 * 1000).toISOString(),\n            goal: 3,\n            goalType: \"books\",\n            isPrivate: false,\n            participantCount: 12,\n            createdAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),\n            updatedAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString()\n          },\n          {\n            id: 3,\n            title: \"Speed Reading Practice\",\n            description: \"Track your reading speed and improve over time\",\n            creatorId: 5,\n            startDate: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),\n            endDate: new Date(Date.now() + 25 * 24 * 60 * 60 * 1000).toISOString(),\n            goal: 1000,\n            goalType: \"minutes\",\n            isPrivate: false,\n            participantCount: 5,\n            createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),\n            updatedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString()\n          }\n        ];\n      } else if (method === 'POST' && currentUser) {\n        // Create a new challenge\n        return {\n          id: 4,\n          title: body.title,\n          description: body.description,\n          creatorId: currentUser.id,\n          startDate: body.startDate,\n          endDate: body.endDate,\n          goal: body.goal,\n          goalType: body.goalType,\n          isPrivate: !!body.isPrivate,\n          participantCount: 1,\n          myProgress: 0,\n          status: \"active\",\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString()\n        };\n      }\n      break;\n      \n    // Get challenge details by ID\n    case `/api/challenges/${idFromUrl}`:\n      if (method === 'GET' && idFromUrl) {\n        return {\n          id: idFromUrl,\n          title: \"30-Day Reading Challenge\",\n          description: \"Read every day for 30 days and track your progress!\",\n          creatorId: 2,\n          creatorName: \"bookworm42\",\n          startDate: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000).toISOString(),\n          endDate: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000).toISOString(),\n          goal: 500,\n          goalType: \"pages\",\n          isPrivate: false,\n          participantCount: 8,\n          myProgress: currentUser ? 220 : undefined,\n          status: currentUser ? \"active\" : undefined,\n          createdAt: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000).toISOString(),\n          updatedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString()\n        };\n      }\n      break;\n      \n    // Get challenge participants\n    case `/api/challenges/${idFromUrl}/participants`:\n      if (method === 'GET' && idFromUrl) {\n        return [\n          {\n            id: 1,\n            userId: currentUser ? currentUser.id : 1,\n            username: currentUser ? currentUser.username : \"demo\",\n            challengeId: idFromUrl,\n            progress: 220,\n            progressPercentage: 44,\n            status: \"active\",\n            joinedAt: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000).toISOString()\n          },\n          {\n            id: 2,\n            userId: 2,\n            username: \"bookworm42\",\n            challengeId: idFromUrl,\n            progress: 350,\n            progressPercentage: 70,\n            status: \"active\",\n            joinedAt: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000).toISOString()\n          },\n          {\n            id: 3,\n            userId: 3,\n            username: \"readaholic\",\n            challengeId: idFromUrl,\n            progress: 500,\n            progressPercentage: 100,\n            status: \"completed\",\n            joinedAt: new Date(Date.now() - 12 * 24 * 60 * 60 * 1000).toISOString()\n          },\n          {\n            id: 4,\n            userId: 4,\n            username: \"bibliophile\",\n            challengeId: idFromUrl,\n            progress: 320,\n            progressPercentage: 64,\n            status: \"active\",\n            joinedAt: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000).toISOString()\n          },\n          {\n            id: 5,\n            userId: 5,\n            username: \"kindlemaster\",\n            challengeId: idFromUrl,\n            progress: 180,\n            progressPercentage: 36,\n            status: \"active\",\n            joinedAt: new Date(Date.now() - 11 * 24 * 60 * 60 * 1000).toISOString()\n          }\n        ];\n      }\n      break;\n      \n    // Update challenge progress\n    case `/api/challenges/${idFromUrl}/progress`:\n      if (method === 'POST' && idFromUrl && currentUser) {\n        return {\n          success: true,\n          message: \"Progress updated successfully\"\n        };\n      }\n      break;\n      \n    // Join a challenge\n    case `/api/challenges/${idFromUrl}/join`:\n      if (method === 'POST' && idFromUrl && currentUser) {\n        return {\n          success: true,\n          message: \"Joined challenge successfully\"\n        };\n      }\n      break;\n      \n    // Challenge comments\n    case `/api/challenges/${idFromUrl}/comments`:\n      if (method === 'GET' && idFromUrl) {\n        return [\n          {\n            id: 1,\n            userId: 2,\n            username: \"bookworm42\",\n            challengeId: idFromUrl,\n            content: \"Let's all try to read daily and support each other!\",\n            createdAt: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000).toISOString()\n          },\n          {\n            id: 2,\n            userId: 3,\n            username: \"readaholic\",\n            challengeId: idFromUrl,\n            content: \"Just finished! It was a great challenge, thanks for organizing!\",\n            createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString()\n          },\n          {\n            id: 3,\n            userId: 5,\n            username: \"kindlemaster\",\n            challengeId: idFromUrl,\n            content: \"I'm finding it harder than expected, but I'm not giving up!\",\n            createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString()\n          }\n        ];\n      } else if (method === 'POST' && idFromUrl && currentUser) {\n        return {\n          id: 4,\n          userId: currentUser.id,\n          username: currentUser.username,\n          challengeId: idFromUrl,\n          content: body.content,\n          createdAt: new Date().toISOString()\n        };\n      }\n      break;\n      \n    default:\n      console.log(`Mock API endpoint not implemented: ${path}`);\n      return [];\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}