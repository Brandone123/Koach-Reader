{"ast":null,"code":"import { mockFetchApi } from './mockApi';\nconst API_URL = 'http://localhost:5000';\nconst USE_MOCK_API = true;\nexport async function fetchApi(endpoint, options = {}) {\n  if (USE_MOCK_API) {\n    try {\n      return await mockFetchApi(endpoint, {\n        method: options.method,\n        body: options.body\n      });\n    } catch (error) {\n      console.error(`Mock API Error (${endpoint}):`, error);\n      throw error;\n    }\n  }\n  const {\n    method = 'GET',\n    body,\n    headers = {},\n    withCredentials = true\n  } = options;\n  const config = {\n    method,\n    headers: Object.assign({\n      'Content-Type': 'application/json'\n    }, headers),\n    credentials: withCredentials ? 'include' : 'omit'\n  };\n  if (body) {\n    config.body = JSON.stringify(body);\n  }\n  try {\n    const response = await fetch(`${API_URL}${endpoint}`, config);\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      throw new Error(errorData.message || 'An error occurred');\n    }\n    const contentType = response.headers.get('content-type');\n    if (contentType && contentType.includes('application/json')) {\n      return await response.json();\n    }\n    return null;\n  } catch (error) {\n    console.error(`API Error (${endpoint}):`, error);\n    if (!USE_MOCK_API) {\n      try {\n        console.log('Falling back to mock API...');\n        return await mockFetchApi(endpoint, {\n          method: options.method,\n          body: options.body\n        });\n      } catch (mockError) {\n        console.error(`Mock API fallback also failed:`, mockError);\n        throw error;\n      }\n    } else {\n      throw error;\n    }\n  }\n}","map":{"version":3,"names":["mockFetchApi","API_URL","USE_MOCK_API","fetchApi","endpoint","options","method","body","error","console","headers","withCredentials","config","Object","assign","credentials","JSON","stringify","response","fetch","ok","errorData","json","catch","Error","message","contentType","get","includes","log","mockError"],"sources":["D:/All_Projects/KoachReadsFinal/client/src/utils/api.ts"],"sourcesContent":["import { mockFetchApi } from './mockApi';\n\n// Configuration for API usage\nconst API_URL = 'http://localhost:5000'; // Replace with your API URL if needed\nconst USE_MOCK_API = true; // For development with Expo Go\n\ninterface ApiOptions {\n  method?: 'GET' | 'POST' | 'PUT' | 'DELETE';\n  body?: any;\n  headers?: HeadersInit;\n  withCredentials?: boolean;\n}\n\nexport async function fetchApi(\n  endpoint: string,\n  options: ApiOptions = {}\n): Promise<any> {\n  // Use mock API in development or when server is unavailable\n  if (USE_MOCK_API) {\n    try {\n      return await mockFetchApi(endpoint, {\n        method: options.method,\n        body: options.body,\n      });\n    } catch (error) {\n      console.error(`Mock API Error (${endpoint}):`, error);\n      throw error;\n    }\n  }\n\n  // Otherwise use the real API\n  const {\n    method = 'GET',\n    body,\n    headers = {},\n    withCredentials = true,\n  } = options;\n\n  const config: RequestInit = {\n    method,\n    headers: {\n      'Content-Type': 'application/json',\n      ...headers,\n    },\n    credentials: withCredentials ? 'include' : 'omit',\n  };\n\n  if (body) {\n    config.body = JSON.stringify(body);\n  }\n\n  try {\n    const response = await fetch(`${API_URL}${endpoint}`, config);\n\n    // Handle API errors\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      throw new Error(errorData.message || 'An error occurred');\n    }\n\n    // Check if response is empty\n    const contentType = response.headers.get('content-type');\n    if (contentType && contentType.includes('application/json')) {\n      return await response.json();\n    }\n\n    return null;\n  } catch (error) {\n    console.error(`API Error (${endpoint}):`, error);\n    \n    // If real API fails, try to fall back to mock API\n    if (!USE_MOCK_API) {\n      try {\n        console.log('Falling back to mock API...');\n        return await mockFetchApi(endpoint, {\n          method: options.method,\n          body: options.body,\n        });\n      } catch (mockError) {\n        console.error(`Mock API fallback also failed:`, mockError);\n        throw error; // Throw the original error\n      }\n    } else {\n      throw error;\n    }\n  }\n}"],"mappings":"AAAA,SAASA,YAAY,QAAQ,WAAW;AAGxC,MAAMC,OAAO,GAAG,uBAAuB;AACvC,MAAMC,YAAY,GAAG,IAAI;AASzB,OAAO,eAAeC,QAAQA,CAC5BC,QAAgB,EAChBC,OAAmB,GAAG,CAAC,CAAC,EACV;EAEd,IAAIH,YAAY,EAAE;IAChB,IAAI;MACF,OAAO,MAAMF,YAAY,CAACI,QAAQ,EAAE;QAClCE,MAAM,EAAED,OAAO,CAACC,MAAM;QACtBC,IAAI,EAAEF,OAAO,CAACE;MAChB,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mBAAmBJ,QAAQ,IAAI,EAAEI,KAAK,CAAC;MACrD,MAAMA,KAAK;IACb;EACF;EAGA,MAAM;IACJF,MAAM,GAAG,KAAK;IACdC,IAAI;IACJG,OAAO,GAAG,CAAC,CAAC;IACZC,eAAe,GAAG;EACpB,CAAC,GAAGN,OAAO;EAEX,MAAMO,MAAmB,GAAG;IAC1BN,MAAM;IACNI,OAAO,EAAAG,MAAA,CAAAC,MAAA;MACL,cAAc,EAAE;IAAkB,GAC/BJ,OAAO,CACX;IACDK,WAAW,EAAEJ,eAAe,GAAG,SAAS,GAAG;EAC7C,CAAC;EAED,IAAIJ,IAAI,EAAE;IACRK,MAAM,CAACL,IAAI,GAAGS,IAAI,CAACC,SAAS,CAACV,IAAI,CAAC;EACpC;EAEA,IAAI;IACF,MAAMW,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGlB,OAAO,GAAGG,QAAQ,EAAE,EAAEQ,MAAM,CAAC;IAG7D,IAAI,CAACM,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;MACzD,MAAM,IAAIC,KAAK,CAACH,SAAS,CAACI,OAAO,IAAI,mBAAmB,CAAC;IAC3D;IAGA,MAAMC,WAAW,GAAGR,QAAQ,CAACR,OAAO,CAACiB,GAAG,CAAC,cAAc,CAAC;IACxD,IAAID,WAAW,IAAIA,WAAW,CAACE,QAAQ,CAAC,kBAAkB,CAAC,EAAE;MAC3D,OAAO,MAAMV,QAAQ,CAACI,IAAI,CAAC,CAAC;IAC9B;IAEA,OAAO,IAAI;EACb,CAAC,CAAC,OAAOd,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,cAAcJ,QAAQ,IAAI,EAAEI,KAAK,CAAC;IAGhD,IAAI,CAACN,YAAY,EAAE;MACjB,IAAI;QACFO,OAAO,CAACoB,GAAG,CAAC,6BAA6B,CAAC;QAC1C,OAAO,MAAM7B,YAAY,CAACI,QAAQ,EAAE;UAClCE,MAAM,EAAED,OAAO,CAACC,MAAM;UACtBC,IAAI,EAAEF,OAAO,CAACE;QAChB,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOuB,SAAS,EAAE;QAClBrB,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEsB,SAAS,CAAC;QAC1D,MAAMtB,KAAK;MACb;IACF,CAAC,MAAM;MACL,MAAMA,KAAK;IACb;EACF;AACF","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}