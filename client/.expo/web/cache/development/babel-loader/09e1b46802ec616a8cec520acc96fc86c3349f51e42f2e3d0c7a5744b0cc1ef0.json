{"ast":null,"code":"var _jsxFileName = \"D:\\\\All_Projects\\\\Koach-Reader\\\\client\\\\src\\\\screens\\\\SettingsScreen.tsx\";\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport RNSwitch from \"react-native-web/dist/exports/Switch\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport Card from \"react-native-paper/lib/module/components/Card/Card\";\nimport { Title } from \"react-native-paper/lib/module/components/Typography/v2\";\nimport { Subheading } from \"react-native-paper/lib/module/components/Typography/v2\";\nimport Divider from \"react-native-paper/lib/module/components/Divider\";\nimport Button from \"react-native-paper/lib/module/components/Button/Button\";\nimport Switch from \"react-native-paper/lib/module/components/Switch/Switch\";\nimport RadioButton from \"react-native-paper/lib/module/components/RadioButton\";\nimport * as List from \"react-native-paper/lib/module/components/List/List\";\nimport { selectUser, updatePreferences } from '../slices/authSlice';\nimport { useTranslation } from 'react-i18next';\nimport LanguageSwitcher from '../components/LanguageSwitcher';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SettingsScreen = ({\n  navigation\n}) => {\n  const {\n    t\n  } = useTranslation();\n  const dispatch = useDispatch();\n  const user = useSelector(selectUser);\n  const defaultPreferences = {\n    theme: 'light',\n    notifications: {\n      readingReminders: true,\n      achievements: true,\n      friendActivity: true,\n      challenges: true\n    },\n    readingFrequency: 'daily',\n    fontSizeMultiplier: 1.0\n  };\n  const userPreferences = Object.assign({}, defaultPreferences, user?.preferences || {});\n  const [preferences, setPreferences] = useState(userPreferences);\n  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\n  const updatePreference = (path, value) => {\n    const newPreferences = Object.assign({}, preferences);\n    const pathParts = path.split('.');\n    if (pathParts.length === 1) {\n      newPreferences[path] = value;\n    } else {\n      let current = newPreferences;\n      for (let i = 0; i < pathParts.length - 1; i++) {\n        current = current[pathParts[i]];\n      }\n      current[pathParts[pathParts.length - 1]] = value;\n    }\n    setPreferences(newPreferences);\n    setHasUnsavedChanges(true);\n  };\n  const savePreferences = () => {\n    dispatch(updatePreferences({\n      preferences\n    }));\n    setHasUnsavedChanges(false);\n  };\n  return _jsxDEV(ScrollView, {\n    style: styles.container,\n    children: [_jsxDEV(Card, {\n      style: styles.section,\n      children: _jsxDEV(Card.Content, {\n        children: [_jsxDEV(Title, {\n          children: t('settings.appearance')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), _jsxDEV(Divider, {\n          style: styles.divider\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), _jsxDEV(View, {\n          style: styles.settingRow,\n          children: [_jsxDEV(View, {\n            style: styles.settingTextContainer,\n            children: [_jsxDEV(Subheading, {\n              children: t('settings.darkMode')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 15\n            }, this), _jsxDEV(Text, {\n              style: styles.settingDescription,\n              children: t('settings.chooseTheme')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this), _jsxDEV(RadioButton.Group, {\n            onValueChange: value => updatePreference('theme', value),\n            value: preferences.theme,\n            children: _jsxDEV(View, {\n              style: styles.radioContainer,\n              children: [_jsxDEV(RadioButton.Item, {\n                label: t('settings.light'),\n                value: \"light\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 17\n              }, this), _jsxDEV(RadioButton.Item, {\n                label: t('settings.dark'),\n                value: \"dark\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 17\n              }, this), _jsxDEV(RadioButton.Item, {\n                label: t('settings.system'),\n                value: \"system\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), _jsxDEV(Divider, {\n          style: styles.divider\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), _jsxDEV(View, {\n          style: styles.settingRow,\n          children: [_jsxDEV(View, {\n            style: styles.settingTextContainer,\n            children: [_jsxDEV(Subheading, {\n              children: t('settings.fontSize')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 15\n            }, this), _jsxDEV(Text, {\n              style: styles.settingDescription,\n              children: t('settings.adjustTextSize')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this), _jsxDEV(View, {\n            style: styles.sliderContainer,\n            children: [_jsxDEV(Text, {\n              style: styles.sliderLabel,\n              children: \"A\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 15\n            }, this), _jsxDEV(RNSwitch, {\n              value: preferences.fontSizeMultiplier > 1.0,\n              onValueChange: value => updatePreference('fontSizeMultiplier', value ? 1.2 : 1.0),\n              trackColor: {\n                false: '#767577',\n                true: '#81b0ff'\n              },\n              thumbColor: preferences.fontSizeMultiplier > 1.0 ? '#6200ee' : '#f4f3f4'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 15\n            }, this), _jsxDEV(Text, {\n              style: [styles.sliderLabel, {\n                fontSize: 20\n              }],\n              children: \"A\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), _jsxDEV(Card, {\n      style: styles.section,\n      children: _jsxDEV(Card.Content, {\n        children: [_jsxDEV(Title, {\n          children: t('common.language')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), _jsxDEV(Divider, {\n          style: styles.divider\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), _jsxDEV(LanguageSwitcher, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), _jsxDEV(Card, {\n      style: styles.section,\n      children: _jsxDEV(Card.Content, {\n        children: [_jsxDEV(Title, {\n          children: t('settings.notifications')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), _jsxDEV(Divider, {\n          style: styles.divider\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), _jsxDEV(List.Section, {\n          children: [_jsxDEV(List.Item, {\n            title: t('settings.readingReminders'),\n            description: t('settings.reminderDescription'),\n            right: () => _jsxDEV(Switch, {\n              value: preferences.notifications.readingReminders,\n              onValueChange: value => updatePreference('notifications.readingReminders', value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, this), _jsxDEV(List.Item, {\n            title: t('settings.achievements'),\n            description: t('settings.achievementDescription'),\n            right: () => _jsxDEV(Switch, {\n              value: preferences.notifications.achievements,\n              onValueChange: value => updatePreference('notifications.achievements', value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this), _jsxDEV(List.Item, {\n            title: t('settings.friendActivity'),\n            description: t('settings.friendDescription'),\n            right: () => _jsxDEV(Switch, {\n              value: preferences.notifications.friendActivity,\n              onValueChange: value => updatePreference('notifications.friendActivity', value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 13\n          }, this), _jsxDEV(List.Item, {\n            title: t('settings.challenges'),\n            description: t('settings.challengeDescription'),\n            right: () => _jsxDEV(Switch, {\n              value: preferences.notifications.challenges,\n              onValueChange: value => updatePreference('notifications.challenges', value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), _jsxDEV(Card, {\n      style: styles.section,\n      children: _jsxDEV(Card.Content, {\n        children: [_jsxDEV(Title, {\n          children: t('settings.readingFrequency')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this), _jsxDEV(Divider, {\n          style: styles.divider\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this), _jsxDEV(RadioButton.Group, {\n          onValueChange: value => updatePreference('readingFrequency', value),\n          value: preferences.readingFrequency,\n          children: [_jsxDEV(RadioButton.Item, {\n            label: t('settings.daily'),\n            value: \"daily\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 13\n          }, this), _jsxDEV(RadioButton.Item, {\n            label: t('settings.weekly'),\n            value: \"weekly\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this), _jsxDEV(RadioButton.Item, {\n            label: t('settings.monthly'),\n            value: \"monthly\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this), _jsxDEV(Button, {\n      mode: \"contained\",\n      onPress: savePreferences,\n      disabled: !hasUnsavedChanges,\n      style: [styles.saveButton, !hasUnsavedChanges && styles.disabledButton],\n      labelStyle: styles.saveButtonText,\n      children: t('common.save')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n    padding: 16\n  },\n  section: {\n    marginBottom: 16,\n    elevation: 2\n  },\n  divider: {\n    marginVertical: 12\n  },\n  settingRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: 8\n  },\n  settingTextContainer: {\n    flex: 1\n  },\n  settingDescription: {\n    color: '#666',\n    fontSize: 14\n  },\n  radioContainer: {\n    alignItems: 'flex-start'\n  },\n  sliderContainer: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  sliderLabel: {\n    marginHorizontal: 8\n  },\n  buttonContainer: {\n    marginVertical: 24,\n    alignItems: 'center'\n  },\n  saveButton: {\n    width: '80%',\n    paddingVertical: 8\n  },\n  disabledButton: {\n    backgroundColor: '#ccc'\n  },\n  saveButtonText: {\n    fontSize: 16\n  }\n});\nexport default SettingsScreen;","map":{"version":3,"names":["React","useState","StyleSheet","View","ScrollView","Text","RNSwitch","useDispatch","useSelector","Card","Title","Subheading","Divider","Button","Switch","RadioButton","List","selectUser","updatePreferences","useTranslation","LanguageSwitcher","jsxDEV","_jsxDEV","SettingsScreen","navigation","t","dispatch","user","defaultPreferences","theme","notifications","readingReminders","achievements","friendActivity","challenges","readingFrequency","fontSizeMultiplier","userPreferences","Object","assign","preferences","setPreferences","hasUnsavedChanges","setHasUnsavedChanges","updatePreference","path","value","newPreferences","pathParts","split","length","current","i","savePreferences","style","styles","container","children","section","Content","fileName","_jsxFileName","lineNumber","columnNumber","divider","settingRow","settingTextContainer","settingDescription","Group","onValueChange","radioContainer","Item","label","sliderContainer","sliderLabel","trackColor","false","true","thumbColor","fontSize","Section","title","description","right","mode","onPress","disabled","saveButton","disabledButton","labelStyle","saveButtonText","create","flex","backgroundColor","padding","marginBottom","elevation","marginVertical","flexDirection","justifyContent","alignItems","paddingVertical","color","marginHorizontal","buttonContainer","width"],"sources":["D:/All_Projects/Koach-Reader/client/src/screens/SettingsScreen.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { StyleSheet, View, ScrollView, Text, Switch as RNSwitch, Platform } from 'react-native';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { StackNavigationProp } from '@react-navigation/stack';\r\nimport { RootStackParamList } from '../../App';\r\nimport { AppDispatch } from '../store';\r\nimport { \r\n  Card, \r\n  Title, \r\n  Subheading,\r\n  Divider, \r\n  Button,\r\n  Switch,\r\n  RadioButton,\r\n  List,\r\n  Checkbox\r\n} from 'react-native-paper';\r\nimport { selectUser, updatePreferences } from '../slices/authSlice';\r\nimport { useTranslation } from 'react-i18next';\r\nimport LanguageSwitcher from '../components/LanguageSwitcher';\r\n\r\n// Add preference type definitions\r\ninterface NotificationPreferences {\r\n  readingReminders: boolean;\r\n  achievements: boolean;\r\n  friendActivity: boolean;\r\n  challenges: boolean;\r\n}\r\n\r\ninterface UserPreferences {\r\n  theme: 'light' | 'dark' | 'system';\r\n  notifications: NotificationPreferences;\r\n  readingFrequency: 'daily' | 'weekly' | 'monthly';\r\n  fontSizeMultiplier: number;\r\n}\r\n\r\ntype SettingsScreenNavigationProp = StackNavigationProp<RootStackParamList, 'Settings'>;\r\n\r\ninterface SettingsScreenProps {\r\n  navigation: SettingsScreenNavigationProp;\r\n}\r\n\r\nconst SettingsScreen: React.FC<SettingsScreenProps> = ({ navigation }) => {\r\n  const { t } = useTranslation();\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const user = useSelector(selectUser);\r\n  \r\n  // Default preferences if user has none\r\n  const defaultPreferences = {\r\n    theme: 'light',\r\n    notifications: {\r\n      readingReminders: true,\r\n      achievements: true,\r\n      friendActivity: true,\r\n      challenges: true\r\n    },\r\n    readingFrequency: 'daily',\r\n    fontSizeMultiplier: 1.0\r\n  };\r\n  \r\n  // Combine default with user preferences\r\n  const userPreferences = { ...defaultPreferences, ...(user?.preferences || {}) };\r\n  \r\n  // Local state for preferences\r\n  const [preferences, setPreferences] = useState(userPreferences);\r\n  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\r\n  \r\n  const updatePreference = (path: string, value: string | boolean | number) => {\r\n    // Deep update of nested preferences\r\n    const newPreferences = { ...preferences };\r\n    const pathParts = path.split('.');\r\n    \r\n    if (pathParts.length === 1) {\r\n      newPreferences[path] = value;\r\n    } else {\r\n      let current = newPreferences;\r\n      for (let i = 0; i < pathParts.length - 1; i++) {\r\n        current = current[pathParts[i]];\r\n      }\r\n      current[pathParts[pathParts.length - 1]] = value;\r\n    }\r\n    \r\n    setPreferences(newPreferences);\r\n    setHasUnsavedChanges(true);\r\n  };\r\n  \r\n  const savePreferences = () => {\r\n    dispatch(updatePreferences({ preferences }));\r\n    setHasUnsavedChanges(false);\r\n  };\r\n  \r\n  return (\r\n    <ScrollView style={styles.container}>\r\n      <Card style={styles.section}>\r\n        <Card.Content>\r\n          <Title>{t('settings.appearance')}</Title>\r\n          <Divider style={styles.divider} />\r\n          \r\n          <View style={styles.settingRow}>\r\n            <View style={styles.settingTextContainer}>\r\n              <Subheading>{t('settings.darkMode')}</Subheading>\r\n              <Text style={styles.settingDescription}>{t('settings.chooseTheme')}</Text>\r\n            </View>\r\n            <RadioButton.Group \r\n              onValueChange={(value) => updatePreference('theme', value)} \r\n              value={preferences.theme}\r\n            >\r\n              <View style={styles.radioContainer}>\r\n                <RadioButton.Item label={t('settings.light')} value=\"light\" />\r\n                <RadioButton.Item label={t('settings.dark')} value=\"dark\" />\r\n                <RadioButton.Item label={t('settings.system')} value=\"system\" />\r\n              </View>\r\n            </RadioButton.Group>\r\n          </View>\r\n          \r\n          <Divider style={styles.divider} />\r\n          \r\n          <View style={styles.settingRow}>\r\n            <View style={styles.settingTextContainer}>\r\n              <Subheading>{t('settings.fontSize')}</Subheading>\r\n              <Text style={styles.settingDescription}>{t('settings.adjustTextSize')}</Text>\r\n            </View>\r\n            <View style={styles.sliderContainer}>\r\n              <Text style={styles.sliderLabel}>A</Text>\r\n              <RNSwitch\r\n                value={preferences.fontSizeMultiplier > 1.0}\r\n                onValueChange={(value) => updatePreference('fontSizeMultiplier', value ? 1.2 : 1.0)}\r\n                trackColor={{ false: '#767577', true: '#81b0ff' }}\r\n                thumbColor={preferences.fontSizeMultiplier > 1.0 ? '#6200ee' : '#f4f3f4'}\r\n              />\r\n              <Text style={[styles.sliderLabel, { fontSize: 20 }]}>A</Text>\r\n            </View>\r\n          </View>\r\n        </Card.Content>\r\n      </Card>\r\n      \r\n      {/* Language Settings Card */}\r\n      <Card style={styles.section}>\r\n        <Card.Content>\r\n          <Title>{t('common.language')}</Title>\r\n          <Divider style={styles.divider} />\r\n          <LanguageSwitcher />\r\n        </Card.Content>\r\n      </Card>\r\n      \r\n      <Card style={styles.section}>\r\n        <Card.Content>\r\n          <Title>{t('settings.notifications')}</Title>\r\n          <Divider style={styles.divider} />\r\n          \r\n          <List.Section>\r\n            <List.Item\r\n              title={t('settings.readingReminders')}\r\n              description={t('settings.reminderDescription')}\r\n              right={() => (\r\n                <Switch\r\n                  value={preferences.notifications.readingReminders}\r\n                  onValueChange={(value) => \r\n                    updatePreference('notifications.readingReminders', value)\r\n                  }\r\n                />\r\n              )}\r\n            />\r\n            \r\n            <List.Item\r\n              title={t('settings.achievements')}\r\n              description={t('settings.achievementDescription')}\r\n              right={() => (\r\n                <Switch\r\n                  value={preferences.notifications.achievements}\r\n                  onValueChange={(value) => \r\n                    updatePreference('notifications.achievements', value)\r\n                  }\r\n                />\r\n              )}\r\n            />\r\n            \r\n            <List.Item\r\n              title={t('settings.friendActivity')}\r\n              description={t('settings.friendDescription')}\r\n              right={() => (\r\n                <Switch\r\n                  value={preferences.notifications.friendActivity}\r\n                  onValueChange={(value) => \r\n                    updatePreference('notifications.friendActivity', value)\r\n                  }\r\n                />\r\n              )}\r\n            />\r\n            \r\n            <List.Item\r\n              title={t('settings.challenges')}\r\n              description={t('settings.challengeDescription')}\r\n              right={() => (\r\n                <Switch\r\n                  value={preferences.notifications.challenges}\r\n                  onValueChange={(value) => \r\n                    updatePreference('notifications.challenges', value)\r\n                  }\r\n                />\r\n              )}\r\n            />\r\n          </List.Section>\r\n        </Card.Content>\r\n      </Card>\r\n      \r\n      <Card style={styles.section}>\r\n        <Card.Content>\r\n          <Title>{t('settings.readingFrequency')}</Title>\r\n          <Divider style={styles.divider} />\r\n          \r\n          <RadioButton.Group \r\n            onValueChange={(value) => updatePreference('readingFrequency', value)} \r\n            value={preferences.readingFrequency}>\r\n            <RadioButton.Item label={t('settings.daily')} value=\"daily\" />\r\n            <RadioButton.Item label={t('settings.weekly')} value=\"weekly\" />\r\n            <RadioButton.Item label={t('settings.monthly')} value=\"monthly\" />\r\n          </RadioButton.Group>\r\n        </Card.Content>\r\n      </Card>\r\n      \r\n      <Button \r\n        mode=\"contained\" \r\n        onPress={savePreferences}\r\n        disabled={!hasUnsavedChanges}\r\n        style={[styles.saveButton, !hasUnsavedChanges && styles.disabledButton]}\r\n        labelStyle={styles.saveButtonText}\r\n      >\r\n        {t('common.save')}\r\n      </Button>\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#f5f5f5',\r\n    padding: 16,\r\n  },\r\n  section: {\r\n    marginBottom: 16,\r\n    elevation: 2,\r\n  },\r\n  divider: {\r\n    marginVertical: 12,\r\n  },\r\n  settingRow: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    paddingVertical: 8,\r\n  },\r\n  settingTextContainer: {\r\n    flex: 1,\r\n  },\r\n  settingDescription: {\r\n    color: '#666',\r\n    fontSize: 14,\r\n  },\r\n  radioContainer: {\r\n    alignItems: 'flex-start',\r\n  },\r\n  sliderContainer: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n  },\r\n  sliderLabel: {\r\n    marginHorizontal: 8,\r\n  },\r\n  buttonContainer: {\r\n    marginVertical: 24,\r\n    alignItems: 'center',\r\n  },\r\n  saveButton: {\r\n    width: '80%',\r\n    paddingVertical: 8,\r\n  },\r\n  disabledButton: {\r\n    backgroundColor: '#ccc',\r\n  },\r\n  saveButtonText: {\r\n    fontSize: 16,\r\n  },\r\n});\r\n\r\nexport default SettingsScreen; "],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}