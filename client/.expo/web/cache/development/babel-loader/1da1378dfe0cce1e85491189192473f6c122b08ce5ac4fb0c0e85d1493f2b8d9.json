{"ast":null,"code":"import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { login as loginAction, register as registerAction, logout as logoutAction, fetchCurrentUser, selectUser, selectIsLoading, selectError } from '../slices/authSlice';\nconst AuthContext = createContext({\n  login: async () => {},\n  register: async () => {},\n  logout: async () => {},\n  user: null,\n  isLoading: false,\n  error: null,\n  setOnboardingCompleted: () => {},\n  needsOnboarding: false\n});\nexport function AuthProvider({\n  children\n}) {\n  const dispatch = useDispatch();\n  const user = useSelector(selectUser);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const [needsOnboarding, setNeedsOnboarding] = useState(false);\n  useEffect(() => {\n    dispatch(fetchCurrentUser());\n  }, [dispatch]);\n  useEffect(() => {\n    if (user && user.hasCompletedOnboarding === false) {\n      setNeedsOnboarding(true);\n    } else {\n      setNeedsOnboarding(false);\n    }\n  }, [user]);\n  const login = async credentials => {\n    await dispatch(loginAction(credentials)).unwrap();\n  };\n  const register = async data => {\n    await dispatch(registerAction(data)).unwrap();\n    setNeedsOnboarding(true);\n  };\n  const logout = async () => {\n    await dispatch(logoutAction()).unwrap();\n  };\n  const setOnboardingCompleted = () => {\n    if (user) {\n      setNeedsOnboarding(false);\n    }\n  };\n  const contextValue = {\n    login,\n    register,\n    logout,\n    user,\n    isLoading,\n    error,\n    setOnboardingCompleted,\n    needsOnboarding\n  };\n  return React.createElement(AuthContext.Provider, {\n    value: contextValue\n  }, children);\n}\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  return context;\n}","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useDispatch","useSelector","login","loginAction","register","registerAction","logout","logoutAction","fetchCurrentUser","selectUser","selectIsLoading","selectError","AuthContext","user","isLoading","error","setOnboardingCompleted","needsOnboarding","AuthProvider","children","dispatch","setNeedsOnboarding","hasCompletedOnboarding","credentials","unwrap","data","contextValue","createElement","Provider","value","useAuth","context"],"sources":["D:/All_Projects/Koach-Reader/client/src/hooks/useAuth.ts"],"sourcesContent":["import React, { createContext, ReactNode, useContext, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { \n  login as loginAction, \n  register as registerAction, \n  logout as logoutAction,\n  fetchCurrentUser,\n  selectUser,\n  selectIsLoading,\n  selectError\n} from '../slices/authSlice';\nimport { AppDispatch } from '../store';\n\ninterface LoginCredentials {\n  username: string;\n  password: string;\n}\n\ninterface RegisterData {\n  username: string;\n  email: string;\n  password: string;\n}\n\nexport interface AuthUser {\n  id: number;\n  username: string;\n  email: string;\n  isPremium: boolean;\n  koachPoints: number;\n  readingStreak: number;\n  preferences?: any;\n  createdAt: string;\n  hasCompletedOnboarding?: boolean;\n}\n\ninterface AuthContextType {\n  login: (credentials: LoginCredentials) => Promise<void>;\n  register: (data: RegisterData) => Promise<void>;\n  logout: () => Promise<void>;\n  user: AuthUser | null;\n  isLoading: boolean;\n  error: string | null;\n  setOnboardingCompleted: () => void;\n  needsOnboarding: boolean;\n}\n\n// Create the context with a default value\nconst AuthContext = createContext<AuthContextType>({\n  login: async () => {},\n  register: async () => {},\n  logout: async () => {},\n  user: null,\n  isLoading: false,\n  error: null,\n  setOnboardingCompleted: () => {},\n  needsOnboarding: false\n});\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const dispatch = useDispatch<AppDispatch>();\n  const user = useSelector(selectUser);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const [needsOnboarding, setNeedsOnboarding] = useState(false);\n\n  useEffect(() => {\n    // Load user data on mount\n    dispatch(fetchCurrentUser());\n  }, [dispatch]);\n\n  useEffect(() => {\n    // Check if user needs onboarding\n    if (user && user.hasCompletedOnboarding === false) {\n      setNeedsOnboarding(true);\n    } else {\n      setNeedsOnboarding(false);\n    }\n  }, [user]);\n\n  const login = async (credentials: LoginCredentials) => {\n    await dispatch(loginAction(credentials)).unwrap();\n  };\n\n  const register = async (data: RegisterData) => {\n    await dispatch(registerAction(data)).unwrap();\n    // Newly registered users need onboarding\n    setNeedsOnboarding(true);\n  };\n\n  const logout = async () => {\n    await dispatch(logoutAction()).unwrap();\n  };\n\n  const setOnboardingCompleted = () => {\n    if (user) {\n      // In a real app, this would update the user data on the server\n      // For now, we'll just update the local state\n      setNeedsOnboarding(false);\n      // Here you would typically dispatch an action to update the user in the Redux store\n      // dispatch(updateUserAction({ ...user, hasCompletedOnboarding: true }));\n    }\n  };\n\n  const contextValue: AuthContextType = {\n    login,\n    register,\n    logout,\n    user,\n    isLoading,\n    error,\n    setOnboardingCompleted,\n    needsOnboarding\n  };\n\n  // Return the context provider with children\n  return React.createElement(\n    AuthContext.Provider,\n    { value: contextValue },\n    children\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  return context;\n}"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAaC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACxF,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SACEC,KAAK,IAAIC,WAAW,EACpBC,QAAQ,IAAIC,cAAc,EAC1BC,MAAM,IAAIC,YAAY,EACtBC,gBAAgB,EAChBC,UAAU,EACVC,eAAe,EACfC,WAAW,QACN,qBAAqB;AAsC5B,MAAMC,WAAW,GAAGhB,aAAa,CAAkB;EACjDM,KAAK,EAAE,MAAAA,CAAA,KAAY,CAAC,CAAC;EACrBE,QAAQ,EAAE,MAAAA,CAAA,KAAY,CAAC,CAAC;EACxBE,MAAM,EAAE,MAAAA,CAAA,KAAY,CAAC,CAAC;EACtBO,IAAI,EAAE,IAAI;EACVC,SAAS,EAAE,KAAK;EAChBC,KAAK,EAAE,IAAI;EACXC,sBAAsB,EAAEA,CAAA,KAAM,CAAC,CAAC;EAChCC,eAAe,EAAE;AACnB,CAAC,CAAC;AAEF,OAAO,SAASC,YAAYA,CAAC;EAAEC;AAAkC,CAAC,EAAE;EAClE,MAAMC,QAAQ,GAAGpB,WAAW,CAAc,CAAC;EAC3C,MAAMa,IAAI,GAAGZ,WAAW,CAACQ,UAAU,CAAC;EACpC,MAAMK,SAAS,GAAGb,WAAW,CAACS,eAAe,CAAC;EAC9C,MAAMK,KAAK,GAAGd,WAAW,CAACU,WAAW,CAAC;EACtC,MAAM,CAACM,eAAe,EAAEI,kBAAkB,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC;EAE7DC,SAAS,CAAC,MAAM;IAEdqB,QAAQ,CAACZ,gBAAgB,CAAC,CAAC,CAAC;EAC9B,CAAC,EAAE,CAACY,QAAQ,CAAC,CAAC;EAEdrB,SAAS,CAAC,MAAM;IAEd,IAAIc,IAAI,IAAIA,IAAI,CAACS,sBAAsB,KAAK,KAAK,EAAE;MACjDD,kBAAkB,CAAC,IAAI,CAAC;IAC1B,CAAC,MAAM;MACLA,kBAAkB,CAAC,KAAK,CAAC;IAC3B;EACF,CAAC,EAAE,CAACR,IAAI,CAAC,CAAC;EAEV,MAAMX,KAAK,GAAG,MAAOqB,WAA6B,IAAK;IACrD,MAAMH,QAAQ,CAACjB,WAAW,CAACoB,WAAW,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC;EACnD,CAAC;EAED,MAAMpB,QAAQ,GAAG,MAAOqB,IAAkB,IAAK;IAC7C,MAAML,QAAQ,CAACf,cAAc,CAACoB,IAAI,CAAC,CAAC,CAACD,MAAM,CAAC,CAAC;IAE7CH,kBAAkB,CAAC,IAAI,CAAC;EAC1B,CAAC;EAED,MAAMf,MAAM,GAAG,MAAAA,CAAA,KAAY;IACzB,MAAMc,QAAQ,CAACb,YAAY,CAAC,CAAC,CAAC,CAACiB,MAAM,CAAC,CAAC;EACzC,CAAC;EAED,MAAMR,sBAAsB,GAAGA,CAAA,KAAM;IACnC,IAAIH,IAAI,EAAE;MAGRQ,kBAAkB,CAAC,KAAK,CAAC;IAG3B;EACF,CAAC;EAED,MAAMK,YAA6B,GAAG;IACpCxB,KAAK;IACLE,QAAQ;IACRE,MAAM;IACNO,IAAI;IACJC,SAAS;IACTC,KAAK;IACLC,sBAAsB;IACtBC;EACF,CAAC;EAGD,OAAOtB,KAAK,CAACgC,aAAa,CACxBf,WAAW,CAACgB,QAAQ,EACpB;IAAEC,KAAK,EAAEH;EAAa,CAAC,EACvBP,QACF,CAAC;AACH;AAEA,OAAO,SAASW,OAAOA,CAAA,EAAG;EACxB,MAAMC,OAAO,GAAGlC,UAAU,CAACe,WAAW,CAAC;EACvC,OAAOmB,OAAO;AAChB","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}