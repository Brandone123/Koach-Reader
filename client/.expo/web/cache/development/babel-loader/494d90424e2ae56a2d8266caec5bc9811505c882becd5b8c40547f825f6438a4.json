{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nconst initialState = {\n  books: [],\n  loading: false,\n  error: null,\n  lastUpdated: null\n};\nconst shouldUpdateFreeBooks = lastUpdated => {\n  if (!lastUpdated) return true;\n  const now = new Date();\n  const lastUpdate = new Date(lastUpdated);\n  const diffMonths = (now.getFullYear() - lastUpdate.getFullYear()) * 12 + now.getMonth() - lastUpdate.getMonth();\n  return diffMonths >= 3;\n};\nconst getExpirationDates = () => {\n  const now = new Date();\n  const expiryDate1 = new Date(now);\n  expiryDate1.setDate(now.getDate() + 30);\n  const expiryDate2 = new Date(now);\n  expiryDate2.setDate(now.getDate() + 60);\n  const expiryDate3 = new Date(now);\n  expiryDate3.setDate(now.getDate() + 90);\n  return [expiryDate1, expiryDate2, expiryDate3];\n};\nexport const fetchFreeQuarterlyBooks = createAsyncThunk('freeQuarterlyBooks/fetchBooks', async (_, {\n  getState,\n  rejectWithValue\n}) => {\n  try {\n    const {\n      freeQuarterlyBooks\n    } = getState();\n    if (!shouldUpdateFreeBooks(freeQuarterlyBooks.lastUpdated) && freeQuarterlyBooks.books.length > 0) {\n      return freeQuarterlyBooks.books;\n    }\n    const currentQuarter = Math.floor(new Date().getMonth() / 3);\n    const [expiryDate1, expiryDate2, expiryDate3] = getExpirationDates();\n    const freeBooks = [{\n      id: 1,\n      title: \"Ne tirez pas sur l'oiseau moqueur\",\n      author: \"Harper Lee\",\n      description: \"Un roman d'une forte importance nationale contemporaine\",\n      coverImageUrl: require('../../assets/book.jpg'),\n      pageCount: 336,\n      availableUntil: expiryDate1.toISOString(),\n      category: \"fiction\"\n    }, {\n      id: 2,\n      title: \"La Bible annotée\",\n      author: \"Collectif\",\n      description: \"Une édition annotée et commentée de la Bible\",\n      coverImageUrl: require('../../assets/book.jpg'),\n      pageCount: 1456,\n      availableUntil: expiryDate2.toISOString(),\n      category: \"bible_studies\"\n    }, {\n      id: 3,\n      title: \"Vivre en Christ\",\n      author: \"Max Lucado\",\n      description: \"Un guide spirituel pour vivre pleinement sa foi au quotidien\",\n      coverImageUrl: require('../../assets/book.jpg'),\n      pageCount: 245,\n      availableUntil: expiryDate3.toISOString(),\n      category: \"spirituality\"\n    }];\n    return freeBooks;\n  } catch (error) {\n    return rejectWithValue(\"Erreur lors du chargement des livres gratuits trimestriels\");\n  }\n});\nconst freeQuarterlyBooksSlice = createSlice({\n  name: 'freeQuarterlyBooks',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchFreeQuarterlyBooks.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchFreeQuarterlyBooks.fulfilled, (state, action) => {\n      state.loading = false;\n      state.books = action.payload;\n      state.lastUpdated = new Date().toISOString();\n    }).addCase(fetchFreeQuarterlyBooks.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    });\n  }\n});\nexport const selectFreeQuarterlyBooks = state => state.freeQuarterlyBooks.books;\nexport const selectFreeQuarterlyBooksLoading = state => state.freeQuarterlyBooks.loading;\nexport const selectFreeQuarterlyBooksError = state => state.freeQuarterlyBooks.error;\nexport default freeQuarterlyBooksSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","books","loading","error","lastUpdated","shouldUpdateFreeBooks","now","Date","lastUpdate","diffMonths","getFullYear","getMonth","getExpirationDates","expiryDate1","setDate","getDate","expiryDate2","expiryDate3","fetchFreeQuarterlyBooks","_","getState","rejectWithValue","freeQuarterlyBooks","length","currentQuarter","Math","floor","freeBooks","id","title","author","description","coverImageUrl","require","pageCount","availableUntil","toISOString","category","freeQuarterlyBooksSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","selectFreeQuarterlyBooks","selectFreeQuarterlyBooksLoading","selectFreeQuarterlyBooksError","reducer"],"sources":["D:/All_Projects/Koach-Reader/client/src/slices/freeQuarterlyBooksSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../store';\r\n\r\n// Définition de l'interface pour un livre gratuit trimestriel\r\nexport interface FreeQuarterlyBook {\r\n  id: number;\r\n  title: string;\r\n  author: string;\r\n  description: string;\r\n  coverImageUrl: any; // Change type to any to allow require()\r\n  pageCount: number;\r\n  availableUntil: string; // Date ISO string\r\n  category: string;\r\n}\r\n\r\ninterface FreeQuarterlyBooksState {\r\n  books: FreeQuarterlyBook[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  lastUpdated: string | null;\r\n}\r\n\r\n// État initial\r\nconst initialState: FreeQuarterlyBooksState = {\r\n  books: [],\r\n  loading: false,\r\n  error: null,\r\n  lastUpdated: null\r\n};\r\n\r\n// Fonction pour vérifier si les livres gratuits doivent être mis à jour (tous les 3 mois)\r\nconst shouldUpdateFreeBooks = (lastUpdated: string | null): boolean => {\r\n  if (!lastUpdated) return true;\r\n  \r\n  const now = new Date();\r\n  const lastUpdate = new Date(lastUpdated);\r\n  \r\n  // Calculer la différence en mois\r\n  const diffMonths = (now.getFullYear() - lastUpdate.getFullYear()) * 12 \r\n    + now.getMonth() - lastUpdate.getMonth();\r\n  \r\n  // Si ça fait 3 mois ou plus, mettre à jour\r\n  return diffMonths >= 3;\r\n};\r\n\r\n// Fonction pour créer des dates d'expiration réalistes\r\nconst getExpirationDates = () => {\r\n  const now = new Date();\r\n  \r\n  // Date d'expiration dans 30 jours pour le premier livre\r\n  const expiryDate1 = new Date(now);\r\n  expiryDate1.setDate(now.getDate() + 30);\r\n  \r\n  // Date d'expiration dans 60 jours pour le deuxième livre\r\n  const expiryDate2 = new Date(now);\r\n  expiryDate2.setDate(now.getDate() + 60);\r\n  \r\n  // Date d'expiration dans 90 jours pour le troisième livre\r\n  const expiryDate3 = new Date(now);\r\n  expiryDate3.setDate(now.getDate() + 90);\r\n  \r\n  return [expiryDate1, expiryDate2, expiryDate3];\r\n};\r\n\r\n// Thunk pour récupérer les livres gratuits trimestriels\r\nexport const fetchFreeQuarterlyBooks = createAsyncThunk(\r\n  'freeQuarterlyBooks/fetchBooks',\r\n  async (_, { getState, rejectWithValue }) => {\r\n    try {\r\n      const { freeQuarterlyBooks } = getState() as RootState;\r\n      \r\n      // Vérifier si on doit mettre à jour les livres gratuits\r\n      if (!shouldUpdateFreeBooks(freeQuarterlyBooks.lastUpdated) && freeQuarterlyBooks.books.length > 0) {\r\n        return freeQuarterlyBooks.books;\r\n      }\r\n      \r\n      // Dans un environnement réel, nous ferions un appel API ici\r\n      // Pour cet exemple, nous allons simuler des données\r\n      \r\n      // Obtenir le trimestre actuel (0-3)\r\n      const currentQuarter = Math.floor(new Date().getMonth() / 3);\r\n      \r\n      // Obtenir des dates d'expiration réalistes\r\n      const [expiryDate1, expiryDate2, expiryDate3] = getExpirationDates();\r\n      \r\n      // Pour l'exemple, générer 3 livres différents par trimestre\r\n      // Utiliser des IDs entre 1 et 100 pour assurer la compatibilité avec l'écran de détail du livre\r\n      const freeBooks: FreeQuarterlyBook[] = [\r\n        {\r\n          id: 1, // ID compatible avec les livres existants dans l'app\r\n          title: \"Ne tirez pas sur l'oiseau moqueur\",\r\n          author: \"Harper Lee\",\r\n          description: \"Un roman d'une forte importance nationale contemporaine\",\r\n          coverImageUrl: require('../../assets/book.jpg'),\r\n          pageCount: 336,\r\n          availableUntil: expiryDate1.toISOString(),\r\n          category: \"fiction\"\r\n        },\r\n        {\r\n          id: 2, // ID compatible avec les livres existants dans l'app\r\n          title: \"La Bible annotée\",\r\n          author: \"Collectif\",\r\n          description: \"Une édition annotée et commentée de la Bible\",\r\n          coverImageUrl: require('../../assets/book.jpg'),\r\n          pageCount: 1456,\r\n          availableUntil: expiryDate2.toISOString(),\r\n          category: \"bible_studies\"\r\n        },\r\n        {\r\n          id: 3, // ID compatible avec les livres existants dans l'app\r\n          title: \"Vivre en Christ\",\r\n          author: \"Max Lucado\",\r\n          description: \"Un guide spirituel pour vivre pleinement sa foi au quotidien\",\r\n          coverImageUrl: require('../../assets/book.jpg'),\r\n          pageCount: 245,\r\n          availableUntil: expiryDate3.toISOString(),\r\n          category: \"spirituality\"\r\n        }\r\n      ];\r\n      \r\n      return freeBooks;\r\n    } catch (error) {\r\n      return rejectWithValue(\"Erreur lors du chargement des livres gratuits trimestriels\");\r\n    }\r\n  }\r\n);\r\n\r\n// Création du slice\r\nconst freeQuarterlyBooksSlice = createSlice({\r\n  name: 'freeQuarterlyBooks',\r\n  initialState,\r\n  reducers: {\r\n    // Définir des reducers supplémentaires si nécessaire\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchFreeQuarterlyBooks.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchFreeQuarterlyBooks.fulfilled, (state, action: PayloadAction<FreeQuarterlyBook[]>) => {\r\n        state.loading = false;\r\n        state.books = action.payload;\r\n        state.lastUpdated = new Date().toISOString();\r\n      })\r\n      .addCase(fetchFreeQuarterlyBooks.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.payload as string;\r\n      });\r\n  }\r\n});\r\n\r\n// Sélecteurs\r\nexport const selectFreeQuarterlyBooks = (state: RootState) => state.freeQuarterlyBooks.books;\r\nexport const selectFreeQuarterlyBooksLoading = (state: RootState) => state.freeQuarterlyBooks.loading;\r\nexport const selectFreeQuarterlyBooksError = (state: RootState) => state.freeQuarterlyBooks.error;\r\n\r\nexport default freeQuarterlyBooksSlice.reducer; "],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAuB,kBAAkB;AAuB/E,MAAMC,YAAqC,GAAG;EAC5CC,KAAK,EAAE,EAAE;EACTC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE,IAAI;EACXC,WAAW,EAAE;AACf,CAAC;AAGD,MAAMC,qBAAqB,GAAID,WAA0B,IAAc;EACrE,IAAI,CAACA,WAAW,EAAE,OAAO,IAAI;EAE7B,MAAME,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;EACtB,MAAMC,UAAU,GAAG,IAAID,IAAI,CAACH,WAAW,CAAC;EAGxC,MAAMK,UAAU,GAAG,CAACH,GAAG,CAACI,WAAW,CAAC,CAAC,GAAGF,UAAU,CAACE,WAAW,CAAC,CAAC,IAAI,EAAE,GAClEJ,GAAG,CAACK,QAAQ,CAAC,CAAC,GAAGH,UAAU,CAACG,QAAQ,CAAC,CAAC;EAG1C,OAAOF,UAAU,IAAI,CAAC;AACxB,CAAC;AAGD,MAAMG,kBAAkB,GAAGA,CAAA,KAAM;EAC/B,MAAMN,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;EAGtB,MAAMM,WAAW,GAAG,IAAIN,IAAI,CAACD,GAAG,CAAC;EACjCO,WAAW,CAACC,OAAO,CAACR,GAAG,CAACS,OAAO,CAAC,CAAC,GAAG,EAAE,CAAC;EAGvC,MAAMC,WAAW,GAAG,IAAIT,IAAI,CAACD,GAAG,CAAC;EACjCU,WAAW,CAACF,OAAO,CAACR,GAAG,CAACS,OAAO,CAAC,CAAC,GAAG,EAAE,CAAC;EAGvC,MAAME,WAAW,GAAG,IAAIV,IAAI,CAACD,GAAG,CAAC;EACjCW,WAAW,CAACH,OAAO,CAACR,GAAG,CAACS,OAAO,CAAC,CAAC,GAAG,EAAE,CAAC;EAEvC,OAAO,CAACF,WAAW,EAAEG,WAAW,EAAEC,WAAW,CAAC;AAChD,CAAC;AAGD,OAAO,MAAMC,uBAAuB,GAAGnB,gBAAgB,CACrD,+BAA+B,EAC/B,OAAOoB,CAAC,EAAE;EAAEC,QAAQ;EAAEC;AAAgB,CAAC,KAAK;EAC1C,IAAI;IACF,MAAM;MAAEC;IAAmB,CAAC,GAAGF,QAAQ,CAAC,CAAc;IAGtD,IAAI,CAACf,qBAAqB,CAACiB,kBAAkB,CAAClB,WAAW,CAAC,IAAIkB,kBAAkB,CAACrB,KAAK,CAACsB,MAAM,GAAG,CAAC,EAAE;MACjG,OAAOD,kBAAkB,CAACrB,KAAK;IACjC;IAMA,MAAMuB,cAAc,GAAGC,IAAI,CAACC,KAAK,CAAC,IAAInB,IAAI,CAAC,CAAC,CAACI,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;IAG5D,MAAM,CAACE,WAAW,EAAEG,WAAW,EAAEC,WAAW,CAAC,GAAGL,kBAAkB,CAAC,CAAC;IAIpE,MAAMe,SAA8B,GAAG,CACrC;MACEC,EAAE,EAAE,CAAC;MACLC,KAAK,EAAE,mCAAmC;MAC1CC,MAAM,EAAE,YAAY;MACpBC,WAAW,EAAE,yDAAyD;MACtEC,aAAa,EAAEC,OAAO,CAAC,uBAAuB,CAAC;MAC/CC,SAAS,EAAE,GAAG;MACdC,cAAc,EAAEtB,WAAW,CAACuB,WAAW,CAAC,CAAC;MACzCC,QAAQ,EAAE;IACZ,CAAC,EACD;MACET,EAAE,EAAE,CAAC;MACLC,KAAK,EAAE,kBAAkB;MACzBC,MAAM,EAAE,WAAW;MACnBC,WAAW,EAAE,8CAA8C;MAC3DC,aAAa,EAAEC,OAAO,CAAC,uBAAuB,CAAC;MAC/CC,SAAS,EAAE,IAAI;MACfC,cAAc,EAAEnB,WAAW,CAACoB,WAAW,CAAC,CAAC;MACzCC,QAAQ,EAAE;IACZ,CAAC,EACD;MACET,EAAE,EAAE,CAAC;MACLC,KAAK,EAAE,iBAAiB;MACxBC,MAAM,EAAE,YAAY;MACpBC,WAAW,EAAE,8DAA8D;MAC3EC,aAAa,EAAEC,OAAO,CAAC,uBAAuB,CAAC;MAC/CC,SAAS,EAAE,GAAG;MACdC,cAAc,EAAElB,WAAW,CAACmB,WAAW,CAAC,CAAC;MACzCC,QAAQ,EAAE;IACZ,CAAC,CACF;IAED,OAAOV,SAAS;EAClB,CAAC,CAAC,OAAOxB,KAAK,EAAE;IACd,OAAOkB,eAAe,CAAC,4DAA4D,CAAC;EACtF;AACF,CACF,CAAC;AAGD,MAAMiB,uBAAuB,GAAGxC,WAAW,CAAC;EAC1CyC,IAAI,EAAE,oBAAoB;EAC1BvC,YAAY;EACZwC,QAAQ,EAAE,CAEV,CAAC;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACzB,uBAAuB,CAAC0B,OAAO,EAAGC,KAAK,IAAK;MACnDA,KAAK,CAAC3C,OAAO,GAAG,IAAI;MACpB2C,KAAK,CAAC1C,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACDwC,OAAO,CAACzB,uBAAuB,CAAC4B,SAAS,EAAE,CAACD,KAAK,EAAEE,MAA0C,KAAK;MACjGF,KAAK,CAAC3C,OAAO,GAAG,KAAK;MACrB2C,KAAK,CAAC5C,KAAK,GAAG8C,MAAM,CAACC,OAAO;MAC5BH,KAAK,CAACzC,WAAW,GAAG,IAAIG,IAAI,CAAC,CAAC,CAAC6B,WAAW,CAAC,CAAC;IAC9C,CAAC,CAAC,CACDO,OAAO,CAACzB,uBAAuB,CAAC+B,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MAC5DF,KAAK,CAAC3C,OAAO,GAAG,KAAK;MACrB2C,KAAK,CAAC1C,KAAK,GAAG4C,MAAM,CAACC,OAAiB;IACxC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAGF,OAAO,MAAME,wBAAwB,GAAIL,KAAgB,IAAKA,KAAK,CAACvB,kBAAkB,CAACrB,KAAK;AAC5F,OAAO,MAAMkD,+BAA+B,GAAIN,KAAgB,IAAKA,KAAK,CAACvB,kBAAkB,CAACpB,OAAO;AACrG,OAAO,MAAMkD,6BAA6B,GAAIP,KAAgB,IAAKA,KAAK,CAACvB,kBAAkB,CAACnB,KAAK;AAEjG,eAAemC,uBAAuB,CAACe,OAAO","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}