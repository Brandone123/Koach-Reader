{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { fetchApi } from '../utils/api';\nimport { mockFetchApi } from '../utils/mockApi';\nconst initialState = {\n  badges: [],\n  userBadges: [],\n  leaderboard: [],\n  achievementGoals: [],\n  isLoading: false,\n  error: null\n};\nexport const fetchBadges = createAsyncThunk('koach/fetchBadges', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const data = await fetchApi('/api/badges');\n    return data;\n  } catch (error) {\n    try {\n      const mockData = await mockFetchApi('/api/badges');\n      return mockData;\n    } catch (mockError) {\n      return rejectWithValue(mockError.message || 'Failed to fetch badges');\n    }\n  }\n});\nexport const fetchUserBadges = createAsyncThunk('koach/fetchUserBadges', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const data = await fetchApi('/api/user/badges');\n    return data;\n  } catch (error) {\n    try {\n      const mockData = await mockFetchApi('/api/user/badges');\n      return mockData;\n    } catch (mockError) {\n      return rejectWithValue(mockError.message || 'Failed to fetch user badges');\n    }\n  }\n});\nexport const fetchLeaderboard = createAsyncThunk('koach/fetchLeaderboard', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const data = await fetchApi('/api/leaderboard');\n    return data;\n  } catch (error) {\n    try {\n      const mockData = await mockFetchApi('/api/leaderboard');\n      return mockData;\n    } catch (mockError) {\n      return rejectWithValue(mockError.message || 'Failed to fetch leaderboard');\n    }\n  }\n});\nexport const fetchAchievementGoals = createAsyncThunk('koach/fetchAchievementGoals', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const data = await fetchApi('/api/goals');\n    return data;\n  } catch (error) {\n    try {\n      const mockData = await mockFetchApi('/api/goals');\n      return mockData;\n    } catch (mockError) {\n      return rejectWithValue(mockError.message || 'Failed to fetch achievement goals');\n    }\n  }\n});\nconst koachSlice = createSlice({\n  name: 'koach',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchBadges.pending, state => {\n      state.isLoading = true;\n      state.error = null;\n    }).addCase(fetchBadges.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.badges = action.payload;\n    }).addCase(fetchBadges.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload || 'Failed to fetch badges';\n    }).addCase(fetchUserBadges.pending, state => {\n      state.isLoading = true;\n      state.error = null;\n    }).addCase(fetchUserBadges.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.userBadges = action.payload;\n    }).addCase(fetchUserBadges.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload || 'Failed to fetch user badges';\n    }).addCase(fetchLeaderboard.pending, state => {\n      state.isLoading = true;\n      state.error = null;\n    }).addCase(fetchLeaderboard.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.leaderboard = action.payload;\n    }).addCase(fetchLeaderboard.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload || 'Failed to fetch leaderboard';\n    }).addCase(fetchAchievementGoals.pending, state => {\n      state.isLoading = true;\n      state.error = null;\n    }).addCase(fetchAchievementGoals.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.achievementGoals = action.payload;\n    }).addCase(fetchAchievementGoals.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload || 'Failed to fetch achievement goals';\n    });\n  }\n});\nexport const selectBadges = state => state.koach.badges;\nexport const selectUserBadges = state => state.koach.userBadges;\nexport const selectLeaderboard = state => state.koach.leaderboard;\nexport const selectAchievementGoals = state => state.koach.achievementGoals;\nexport const selectIsLoading = state => state.koach.isLoading;\nexport const selectError = state => state.koach.error;\nexport default koachSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchApi","mockFetchApi","initialState","badges","userBadges","leaderboard","achievementGoals","isLoading","error","fetchBadges","_","rejectWithValue","data","mockData","mockError","message","fetchUserBadges","fetchLeaderboard","fetchAchievementGoals","koachSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","selectBadges","koach","selectUserBadges","selectLeaderboard","selectAchievementGoals","selectIsLoading","selectError","reducer"],"sources":["D:/All_Projects/Koach-Reader/client/src/slices/koachSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../store';\nimport { fetchApi } from '../utils/api';\nimport { mockFetchApi } from '../utils/mockApi';\n\nexport interface Badge {\n  id: number;\n  name: string;\n  description: string;\n  imageUrl: string;\n  requirement: string;\n  points: number;\n}\n\nexport interface UserBadge {\n  id: number;\n  badgeId: number;\n  userId: number;\n  dateEarned: string;\n  badge?: Badge;\n}\n\nexport interface AchievementGoal {\n  id: string;\n  name: string;\n  description: string;\n  currentValue: number;\n  targetValue: number;\n  progress: number; // 0-100\n  completed: boolean;\n  reward: {\n    type: 'badge' | 'points';\n    value: number;\n    badgeId?: number;\n  };\n}\n\ninterface KoachState {\n  badges: Badge[];\n  userBadges: UserBadge[];\n  leaderboard: Array<{ userId: number; username: string; points: number; rank: number }>;\n  achievementGoals: AchievementGoal[];\n  isLoading: boolean;\n  error: string | null;\n}\n\nconst initialState: KoachState = {\n  badges: [],\n  userBadges: [],\n  leaderboard: [],\n  achievementGoals: [],\n  isLoading: false,\n  error: null,\n};\n\n// Async thunks\nexport const fetchBadges = createAsyncThunk(\n  'koach/fetchBadges',\n  async (_, { rejectWithValue }) => {\n    try {\n      // Try to fetch from the real API\n      const data = await fetchApi('/api/badges');\n      return data;\n    } catch (error) {\n      try {\n        // Fall back to mock API if the real request fails\n        const mockData = await mockFetchApi('/api/badges');\n        return mockData;\n      } catch (mockError: any) {\n        return rejectWithValue(mockError.message || 'Failed to fetch badges');\n      }\n    }\n  }\n);\n\nexport const fetchUserBadges = createAsyncThunk(\n  'koach/fetchUserBadges',\n  async (_, { rejectWithValue }) => {\n    try {\n      // Try to fetch from the real API\n      const data = await fetchApi('/api/user/badges');\n      return data;\n    } catch (error) {\n      try {\n        // Fall back to mock API if the real request fails\n        const mockData = await mockFetchApi('/api/user/badges');\n        return mockData;\n      } catch (mockError: any) {\n        return rejectWithValue(mockError.message || 'Failed to fetch user badges');\n      }\n    }\n  }\n);\n\nexport const fetchLeaderboard = createAsyncThunk(\n  'koach/fetchLeaderboard',\n  async (_, { rejectWithValue }) => {\n    try {\n      // Try to fetch from the real API\n      const data = await fetchApi('/api/leaderboard');\n      return data;\n    } catch (error) {\n      try {\n        // Fall back to mock API if the real request fails\n        const mockData = await mockFetchApi('/api/leaderboard');\n        return mockData;\n      } catch (mockError: any) {\n        return rejectWithValue(\n          mockError.message || 'Failed to fetch leaderboard'\n        );\n      }\n    }\n  }\n);\n\nexport const fetchAchievementGoals = createAsyncThunk(\n  'koach/fetchAchievementGoals',\n  async (_, { rejectWithValue }) => {\n    try {\n      // Try to fetch from the real API\n      const data = await fetchApi('/api/goals');\n      return data;\n    } catch (error) {\n      try {\n        // Fall back to mock API if the real request fails\n        const mockData = await mockFetchApi('/api/goals');\n        return mockData;\n      } catch (mockError: any) {\n        return rejectWithValue(\n          mockError.message || 'Failed to fetch achievement goals'\n        );\n      }\n    }\n  }\n);\n\nconst koachSlice = createSlice({\n  name: 'koach',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      // Fetch Badges\n      .addCase(fetchBadges.pending, (state) => {\n        state.isLoading = true;\n        state.error = null;\n      })\n      .addCase(fetchBadges.fulfilled, (state, action: PayloadAction<Badge[]>) => {\n        state.isLoading = false;\n        state.badges = action.payload;\n      })\n      .addCase(fetchBadges.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.payload as string || 'Failed to fetch badges';\n      })\n\n      // Fetch User Badges\n      .addCase(fetchUserBadges.pending, (state) => {\n        state.isLoading = true;\n        state.error = null;\n      })\n      .addCase(fetchUserBadges.fulfilled, (state, action: PayloadAction<UserBadge[]>) => {\n        state.isLoading = false;\n        state.userBadges = action.payload;\n      })\n      .addCase(fetchUserBadges.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.payload as string || 'Failed to fetch user badges';\n      })\n\n      // Fetch Leaderboard\n      .addCase(fetchLeaderboard.pending, (state) => {\n        state.isLoading = true;\n        state.error = null;\n      })\n      .addCase(fetchLeaderboard.fulfilled, (state, action: PayloadAction<Array<{ userId: number; username: string; points: number; rank: number }>>) => {\n        state.isLoading = false;\n        state.leaderboard = action.payload;\n      })\n      .addCase(fetchLeaderboard.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.payload as string || 'Failed to fetch leaderboard';\n      })\n\n      // Fetch Achievement Goals\n      .addCase(fetchAchievementGoals.pending, (state) => {\n        state.isLoading = true;\n        state.error = null;\n      })\n      .addCase(fetchAchievementGoals.fulfilled, (state, action: PayloadAction<AchievementGoal[]>) => {\n        state.isLoading = false;\n        state.achievementGoals = action.payload;\n      })\n      .addCase(fetchAchievementGoals.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.payload as string || 'Failed to fetch achievement goals';\n      });\n  },\n});\n\n// Selectors\nexport const selectBadges = (state: RootState) => state.koach.badges;\nexport const selectUserBadges = (state: RootState) => state.koach.userBadges;\nexport const selectLeaderboard = (state: RootState) => state.koach.leaderboard;\nexport const selectAchievementGoals = (state: RootState) => state.koach.achievementGoals;\nexport const selectIsLoading = (state: RootState) => state.koach.isLoading;\nexport const selectError = (state: RootState) => state.koach.error;\n\nexport default koachSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}